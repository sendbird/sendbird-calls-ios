#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.7.1 (swiftlang-5.7.1.135.3 clang-1400.0.29.51)
#ifndef SENDBIRDCALLS_SWIFT_H
#define SENDBIRDCALLS_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wduplicate-method-match"
#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT noexcept
#endif
#else
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT 
#endif
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_CXX_INT_DEFINED)
#define SWIFT_CXX_INT_DEFINED
namespace swift {
using Int = ptrdiff_t;
using UInt = size_t;
}
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import AVFAudio;
@import CoreFoundation;
@import CoreMedia;
@import Dispatch;
@import Foundation;
@import ObjectiveC;
@import PushKit;
@import UIKit;
@import WebRTC;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="SendBirdCalls",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
@class SBCCallOptions;

/// Parameter for accepting incoming call from another user. Contains initial configurations for the call.
/// since:
/// 1.0.0
SWIFT_CLASS_NAMED("AcceptParams")
@interface SBCAcceptParams : NSObject
/// Options for the call.
/// since:
/// 1.0.0
@property (nonatomic, strong) SBCCallOptions * _Nonnull callOptions;
/// Holds the active call and accepts an incoming call.
/// since:
/// 1.8.0
@property (nonatomic) BOOL holdActiveCall;
/// since:
/// 1.8.0
/// \param callOptions Call Options for configuring the incoming call. Default value is <code>CallOptions()</code> with only audio call capability.
///
/// \param holdActiveCall Holds the active call and accepts an incoming call.
///
- (nonnull instancetype)initWithCallOptions:(SBCCallOptions * _Nonnull)callOptions holdActiveCall:(BOOL)holdActiveCall OBJC_DESIGNATED_INITIALIZER;
/// since:
/// 1.0.0
- (nonnull instancetype)initWithCallOptions:(SBCCallOptions * _Nonnull)callOptions;
/// since:
/// 1.0.0
/// \param callOptions Call Options for configuring the incoming call. Default value is <code>CallOptions()</code> with only audio call capability.
///
- (nonnull instancetype)init;
@end

@class NSString;

/// Configuration for authentication of SendBird user.
/// since:
/// 1.0.0
SWIFT_CLASS_NAMED("AuthenticateParams")
@interface SBCAuthenticateParams : NSObject
/// User Id of the user.
/// since:
/// 1.0.0
@property (nonatomic, copy) NSString * _Nonnull userId;
/// Access Token used for extra layer of security.
/// since:
/// 1.0.0
@property (nonatomic, copy) NSString * _Nullable accessToken;
/// since:
/// 1.0.0
/// \param userId User Id of the user.
///
/// \param accessToken Access Token used for extra layer of security.
///
- (nonnull instancetype)initWithUserId:(NSString * _Nonnull)userId accessToken:(NSString * _Nullable)accessToken OBJC_DESIGNATED_INITIALIZER;
/// since:
/// 1.2.0
/// \param userId User Id of the user.
///
- (nonnull instancetype)initWithUserId:(NSString * _Nonnull)userId;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE_MSG("Use `init(userId:)` instead.");
@end


@class SBCVideoView;

/// Options for configuring the call.
/// since:
/// 1.0.0
SWIFT_CLASS_NAMED("CallOptions")
@interface SBCCallOptions : NSObject
/// Shows local user’s screen.
/// since:
/// 1.0.0
@property (nonatomic, weak) SBCVideoView * _Nullable localVideoView;
/// Shows remote user’s screen.
/// since:
/// 1.0.0
@property (nonatomic, weak) SBCVideoView * _Nullable remoteVideoView;
/// <code>Bool</code> value indicates that whether to use the front camera when it start video call. device. The default value is <code>true</code>.
/// since:
/// 1.0.0
@property (nonatomic) BOOL useFrontCamera;
/// Bool value indicating whether the call will start with audio. If the value if <code>false</code>, the call will start without audio.
/// since:
/// 1.0.0
@property (nonatomic) BOOL isAudioEnabled;
/// Bool value indicating whether the call will start with video. If the value if <code>false</code>, the call will start without video.
/// since:
/// 1.0.0
@property (nonatomic) BOOL isVideoEnabled;
/// Sets up voice call options. <code>isVideoEnabled</code> has <code>false</code> as a value.
/// since:
/// 1.0.0
/// \param isAudioEnabled Bool value indicating whether the call starts with audio. The default value is <code>true</code>.
///
- (nonnull instancetype)initWithAudioEnabled:(BOOL)isAudioEnabled;
/// since:
/// 1.0.0
/// \param isAudioEnabled <code>Bool</code> object assigned <code>true</code> as a default value.
///
/// \param isVideoEnabled <code>Bool</code> object assigned <code>true</code> as a default value.
///
/// \param localVideoView <code>SendBirdVideoView</code> object to show local video. Default value is <code>nil</code>
///
/// \param remoteVideoView <code>SendBirdVideoView</code> object to show remote video. Default value is <code>nil</code>
///
- (nonnull instancetype)initWithAudioEnabled:(BOOL)isAudioEnabled videoEnabled:(BOOL)isVideoEnabled localVideoView:(SBCVideoView * _Nullable)localVideoView remoteVideoView:(SBCVideoView * _Nullable)remoteVideoView useFrontCamera:(BOOL)useFrontCamera OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init;
@end


@interface SBCCallOptions (SWIFT_EXTENSION(SendBirdCalls)) <NSCopying>
/// Returns a copied instance of the <code>CallOptions</code>.
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
@end

@class SBCChatOptions;

/// Parameter for dialing another user. Contains initial configurations for the call.
/// since:
/// 1.0.0
SWIFT_CLASS_NAMED("DialParams")
@interface SBCDialParams : NSObject
/// User Id of the callee to be called.
/// since:
/// 1.0.0
@property (nonatomic, copy) NSString * _Nonnull calleeId;
/// <code>Bool</code> value indicating whether the call supports vieo call. The default value is <code>false</code>.
/// since:
/// 1.0.0
@property (nonatomic) BOOL isVideoCall;
/// Options for the call.
/// since:
/// 1.0.0
@property (nonatomic, strong) SBCCallOptions * _Nonnull callOptions;
/// Custom items for the call.
/// since:
/// 1.0.0
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nonnull customItems;
@property (nonatomic, strong) SBCChatOptions * _Nullable sendbirdChatOptions;
/// Holds the active call and dials a new call.
/// since:
/// 1.8.0
@property (nonatomic) BOOL holdActiveCall;
/// since:
/// 1.8.0.
/// \param calleeId The callee’s user ID
///
/// \param isVideoCall <code>Bool</code> value indicating whether the call supports vieo call. The default value is <code>false</code>.
///
/// \param callOptions Call options for configuring the outgoing call. The default value is <code>CallOptions()</code> with only audio call capability.
///
/// \param customItems Custom items for the call. The default value is empty dictionary.
///
/// \param sendbirdChatOptions Options for configuring SendBird Chat.
///
/// \param holdActiveCall Holds the active call and dials a new call.
///
- (nonnull instancetype)initWithCalleeId:(NSString * _Nonnull)calleeId isVideoCall:(BOOL)isVideoCall callOptions:(SBCCallOptions * _Nonnull)callOptions customItems:(NSDictionary<NSString *, NSString *> * _Nonnull)customItems sendbirdChatOptions:(SBCChatOptions * _Nullable)sendbirdChatOptions holdActiveCall:(BOOL)holdActiveCall OBJC_DESIGNATED_INITIALIZER;
/// since:
/// 1.5.0
/// \param calleeId The callee’s user ID
///
/// \param isVideoCall <code>Bool</code> value indicating whether the call supports vieo call. The default value is <code>false</code>.
///
/// \param callOptions Call options for configuring the outgoing call. The default value is <code>CallOptions()</code> with only audio call capability.
///
/// \param customItems Custom items for the call. The default value is empty dictionary.
///
- (nonnull instancetype)initWithCalleeId:(NSString * _Nonnull)calleeId isVideoCall:(BOOL)isVideoCall callOptions:(SBCCallOptions * _Nonnull)callOptions customItems:(NSDictionary<NSString *, NSString *> * _Nonnull)customItems;
/// since:
/// 1.0.0
/// \param calleeId The callee’s user ID
///
- (nonnull instancetype)initWithCalleeId:(NSString * _Nonnull)calleeId;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE_MSG("Use `init(calleeId:)` instead.");
@end


@interface SBCDialParams (SWIFT_EXTENSION(SendBirdCalls)) <NSCopying>
/// Returns a copied instance of the <code>DialParams</code>.
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
@end

@class NSUUID;
@class SBCDirectCallUser;
enum SBCDirectCallUserRole : NSInteger;
@class SBCDirectCallLog;
enum SBCDirectCallEndResult : NSInteger;
@protocol SBCDirectCallDelegate;
enum SBCRecordingStatus : NSInteger;

/// DirectCall class for a call between two participants. Every call is identified with a unique key.
SWIFT_CLASS_NAMED("DirectCall")
@interface SBCDirectCall : NSObject
/// Call ID of the call. This value is generated from our Sendbird server and is <code>String</code> representation of a UUID
/// since:
/// 1.0.0
@property (nonatomic, readonly, copy) NSString * _Nonnull callId;
/// The UUID form of callId. Useful when dealing with CallKit.
/// since:
/// 1.0.0
@property (nonatomic, readonly, copy) NSUUID * _Nullable callUUID;
/// The caller object.
/// since:
/// 1.0.0
@property (nonatomic, readonly, strong) SBCDirectCallUser * _Nullable caller;
/// The callee object.
/// since:
/// 1.0.0
@property (nonatomic, readonly, strong) SBCDirectCallUser * _Nullable callee;
/// Custom items of the DirectCall.
/// since:
/// 1.0.0
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nonnull customItems;
/// The remote user of the call.
/// \code
/// guard let remoteUser = self.call.remoteUser else { return }
/// self.remoteUserIdLabel.text = remoteUser.userId
///
/// \endcodesince:
/// 1.0.0
@property (nonatomic, readonly, strong) SBCDirectCallUser * _Nullable remoteUser;
/// The local user of the call.
/// \code
/// guard let localUser = self.call.localUser else { return }
/// self.localUserIdLabel.text = localUser.userId
///
/// \endcodesince:
/// 1.0.0
@property (nonatomic, readonly, strong) SBCDirectCallUser * _Nullable localUser;
/// The role of the current user.
/// since:
/// 1.0.0
@property (nonatomic, readonly) enum SBCDirectCallUserRole myRole;
/// Presents <code>DirectCallLog</code> instance that is a history of the call. The value is <code>nil</code> before the call is ended. The value just after ending can be different from the value after syncing with the server.
/// since:
/// 1.1.0
@property (nonatomic, readonly, strong) SBCDirectCallLog * _Nullable callLog;
/// User that ended the call. Only exists for ended calls.
/// since:
/// 1.0.0
@property (nonatomic, readonly, strong) SBCDirectCallUser * _Nullable endedBy;
/// End Result of the ended call.
/// since:
/// 1.0.0
@property (nonatomic, readonly) enum SBCDirectCallEndResult endResult;
/// Boolean value indicating whether the call has ended.
/// since:
/// 1.0.0
@property (nonatomic, readonly) BOOL isEnded;
/// Boolean value indicating whether the call is ongoing.
/// since:
/// 1.2.0
@property (nonatomic, readonly) BOOL isOngoing;
/// The start time of call. Int64 of miliseconds.
/// important:
///
/// Returns 0 if the call hasn’t started.
/// since:
/// 1.0.0
@property (nonatomic, readonly) int64_t startedAt;
/// The ended time of call. Int64 of miliseconds.
/// important:
///
/// Returns 0 if the call hasn’t ended.
/// since:
/// 1.0.0
@property (nonatomic, readonly) int64_t endedAt;
/// The duration of the call. Int64 of miliseconds.
/// important:
///
/// Returns 0 if the call hasn’t started.
/// since:
/// 1.0.0
@property (nonatomic, readonly) int64_t duration;
/// The audio status of the remote user.
/// since:
/// 1.0.0
@property (nonatomic, readonly) BOOL isRemoteAudioEnabled;
/// The audio status of the local user.
/// since:
/// 1.0.0
@property (nonatomic, readonly) BOOL isLocalAudioEnabled;
/// The local <code>SendBirdVideoView</code>. This is a read-only property. If you want to update value, use <a href="x-source-tag://updateLocalVideoView(_)">updateLocalVideo(_:)</a>
/// since:
/// 1.0.0
/// <ul>
///   <li>
///     See Also:
///     <ul>
///       <li>
///         <a href="x-source-tag://updateLocalVideoView(_)">updateLocalVideo(_:)</a>
///       </li>
///       <li>
///         <a href="x-source-tag://SendBirdVideoView">SendBirdVideoView</a>
///       </li>
///     </ul>
///   </li>
/// </ul>
@property (nonatomic, readonly, weak) SBCVideoView * _Nullable localVideoView;
/// The remote <code>SendBirdVideoView</code>. This is a read-only property. If you want to update value, use <a href="x-source-tag://updateRemoteVideoView(_)">updateRemoteVideo(_:)</a>
/// since:
/// 1.0.0
/// <ul>
///   <li>
///     See Also:
///     <ul>
///       <li>
///         <a href="x-source-tag://updateRemoteVideoView(_)">updateRemoteVideo(_:)</a>
///       </li>
///       <li>
///         <a href="x-source-tag://SendBirdVideoView">SendBirdVideoView</a>
///       </li>
///     </ul>
///   </li>
/// </ul>
@property (nonatomic, readonly, weak) SBCVideoView * _Nullable remoteVideoView;
/// The diplaying status of the local user.
/// since:
/// 1.0.0
@property (nonatomic, readonly) BOOL isLocalVideoEnabled;
/// The displaying staus of the remote user.
/// since:
/// 1.0.0
@property (nonatomic, readonly) BOOL isRemoteVideoEnabled;
/// Indicates whether the call is on hold by either a callee or a caller, or by both.
/// since:
/// 1.8.0
@property (nonatomic, readonly) BOOL isOnHold;
/// Boolean value indicating whether the call supports video call. If <code>false</code>, the call is for audio only. The default value is <code>false</code>.
/// since:
/// 1.0.0
@property (nonatomic, readonly) BOOL isVideoCall;
/// <code>DirectCallDelegate</code> for this call. DirectCall will notify this delegate for any call-specific events.
/// \code
/// call.delegate?.someMethod()
///
/// \endcodesince:
/// 1.0.0
@property (nonatomic, weak) id <SBCDirectCallDelegate> _Nullable delegate;
/// Boolean value indicating whether the call is currently being recorded.
/// since:
/// 1.3.0
@property (nonatomic, readonly) BOOL isRecording SWIFT_DEPRECATED_MSG("isRecording has been changed to `localRecordingStatus`. ");
/// Value indicating the local recording status of the call.
/// since:
/// 1.4.0
@property (nonatomic, readonly) enum SBCRecordingStatus localRecordingStatus;
/// Value indicating the remote recording status of the call.
/// since:
/// 1.4.0
@property (nonatomic, readonly) enum SBCRecordingStatus remoteRecordingStatus;
/// Indicates whether the local user’s screen is being shared.
/// since:
/// 1.5.4
@property (nonatomic, readonly) BOOL isLocalScreenShareEnabled;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// User Role of Direct Call
/// since:
/// 1.0.0
/// <ul>
///   <li>
///     Cases:
///     <ul>
///       <li>
///         caller: The user who made the call.
///       </li>
///       <li>
///         callee: The user who received the call.
///       </li>
///     </ul>
///   </li>
/// </ul>
typedef SWIFT_ENUM_NAMED(NSInteger, SBCDirectCallUserRole, "UserRole", open) {
/// The user who made the call.
/// since:
/// 1.0.0
  SBCDirectCallUserRoleCaller = 0,
/// The user who received the call.
/// since:
/// 1.0.0
  SBCDirectCallUserRoleCallee = 1,
};




@interface SBCDirectCall (SWIFT_EXTENSION(SendBirdCalls)) <NSCopying>
/// Returns a copied instance of the <code>DirectCall</code>.
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
@end


@class SBCError;

@interface SBCDirectCall (SWIFT_EXTENSION(SendBirdCalls))
/// Starts screen share of the local user. Used with Apple’s ReplayKit.
/// \code
/// let recorder = RPScreenRecorder.shared()
///
/// call.startScreenShare { (bufferHandler, error) in
///    guard error == nil else { return }
///
///    recorder.startCapture { (buffer, bufferType, error) in
///        bufferHandler?(buffer, error)
///    } completionHandler: { (error) in
///        guard error == nil else { return } // Handle error
///        // Successfully started screen share
///    }
/// }
///
///
/// \endcodesince:
/// 1.5.4
/// \param completionHandler A handler that contains CMSampleBuffer Handler and an error depending on the result.  CMSampleBuffer Handler should be called inside the completionHandler of <code>RPScreenRecorder.startCapture</code>.
///
- (void)startScreenShareWithCompletionHandler:(void (^ _Nonnull)(void (^ _Nullable)(CMSampleBufferRef _Nonnull, NSError * _Nullable), SBCError * _Nullable))completionHandler;
/// Stops screen share of the local user.
/// <code>RPScreenRecorder.stopCapture</code> should be called before calling this method.
/// \code
/// let recorder = RPScreenRecorder.shared()
/// ...
/// recorder.stopCapture { (error) in
///     self.call.stopScreenShare()
/// }
///
/// \endcodesince:
/// 1.5.4
/// \param completionHandler A handler that contains an error depending on the result.
///
- (void)stopScreenShareWithCompletionHandler:(void (^ _Nullable)(SBCError * _Nullable))completionHandler;
@end


@interface SBCDirectCall (SWIFT_EXTENSION(SendBirdCalls))
/// The hash value of <code>DirectCall</code>.
@property (nonatomic, readonly) NSUInteger hash;
/// Returns a Boolean value that indicates whether the <code>DirectCall</code> and a given object are equal.
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end


@interface SBCDirectCall (SWIFT_EXTENSION(SendBirdCalls))
/// Removes the listener for connection quality and its monitoring modes.
/// since:
/// 1.10.5
- (void)removeConnectionQualityDelegate;
@end


@class SBCRecordingOptions;

@interface SBCDirectCall (SWIFT_EXTENSION(SendBirdCalls))
/// Starts a media recording session of a direct call. Only one ongoing recording session is allowed.
/// \code
/// let options = RecordingOptions(recordingType: .localRemoteAudios, directoryPath: FileManager.default.getDocumentsDirectory())
///
/// call.startRecording(options: options) { recorderId, error in
///     if let id = recorderId {
///         // Recording successfully started
///     }
/// }
///
///
/// \endcodesince:
/// 1.3.0
/// \param options An option that is used when creating a recording session. It contains information about the type of the recording and its settings.
///
/// \param recordingStartedHandler A handler that receives the <code>recordingId</code> and an error depending on the result.
///
- (void)startRecordingWithOptions:(SBCRecordingOptions * _Nonnull)options recordingStartedHandler:(void (^ _Nonnull)(NSString * _Nullable, SBCError * _Nullable))recordingStartedHandler;
/// Stops a media recording session with the specified <code>recordingId</code>, and depending on the result of the recording, calls the <code>didSaveRecording</code> method of a <code>SendBirdRecordingDelegate</code>.
/// \code
/// call.stopRecording(recorderId: recorderId)
///
/// \endcodesince:
/// 1.3.0
/// \param recordingId A unique identifier returned through the <code>recordingStartedHandler</code> when the <code>startRecording</code> method is called.
///
///
/// returns:
/// (discardable) Boolean value that indicates whether the specified recordingId is valid.
- (BOOL)stopRecordingWithRecordingId:(NSString * _Nonnull)recordingId;
@end





@class SBCVideoDevice;
@class UIImage;

@interface SBCDirectCall (SWIFT_EXTENSION(SendBirdCalls))
/// Starts local video. If the callee changes video settings, the caller is notified via the <code>DirectCallDelegate.didRemoteVideoSettingsChange()</code> delegate.
/// \code
/// // Start my local video
/// call.startVideo()
///
/// // receives the event
/// class MyClass: DirectCallDelegate {
///     ...
///     func didRemoteVideoSettingsChange(_ call: DirectCall) {
///         if (call.isRemoteVideoEnabled) {
///             // The peer has been unmuted.
///         } else {
///             // The peer has been muted.
///         }
///     }
///     ...
/// }
///
/// \endcodesince:
/// 1.0.0
- (void)startVideo;
/// Stops local video. If the callee changes video settings, the caller is notified via the <code>DirectCallDelegate.didRemoteVideoSettingsChange()</code> delegate.
/// \code
/// // Stop my local video
/// call.stopVideo()
///
/// // receives the event
/// class MyClass: DirectCallDelegate {
///     ...
///     func didRemoteVideoSettingsChange(_ call: DirectCall) {
///         if (call.isRemoteVideoEnabled) {
///             // The peer has been unmuted.
///         } else {
///             // The peer has been muted.
///         }
///     }
///     ...
/// }
///
/// \endcodesince:
/// 1.0.0
- (void)stopVideo;
/// Updates local <code>SendBirdVideoView</code>
/// since:
/// 1.0.0
/// <ul>
///   <li>
///     See Also: <a href="x-source-tag://SendBirdVideoView">SendBirdVideoView</a>
///   </li>
/// </ul>
/// \param videoView <code>SendBirdVideoView</code> object.
///
- (void)updateLocalVideoView:(SBCVideoView * _Nonnull)videoView;
/// Updates remote <code>SendBirdVideoView</code>
/// since:
/// 1.0.0
/// <ul>
///   <li>
///     See Also: <a href="x-source-tag://SendBirdVideoView">SendBirdVideoView</a>
///   </li>
/// </ul>
/// \param videoView <code>SendBirdVideoView</code> object.
///
- (void)updateRemoteVideoView:(SBCVideoView * _Nonnull)videoView;
/// List of available video devices that support video capture.
/// since:
/// 1.0.0
/// <ul>
///   <li>
///     See Also: <a href="x-source-tag://VideoDevice">VideoDevice</a>
///   </li>
/// </ul>
@property (nonatomic, readonly, copy) NSArray<SBCVideoDevice *> * _Nonnull availableVideoDevices;
/// Current video device using with capture device.
/// since:
/// 1.0.0
/// <ul>
///   <li>
///     See Also: <a href="x-source-tag://VideoDevice">VideoDevice</a>
///   </li>
/// </ul>
@property (nonatomic, readonly, strong) SBCVideoDevice * _Nullable currentVideoDevice;
/// Changes current video device asynchronously and notifies callback on completion.
/// since:
/// 1.0.0
/// <ul>
///   <li>
///     See Also: <a href="x-source-tag://VideoDevice">VideoDevice</a>
///   </li>
/// </ul>
/// \param device <code>VideoDevice</code> object.
///
/// \param completionHandler Callback completionHandler. Contains error.
///
- (void)selectVideoDevice:(SBCVideoDevice * _Nonnull)device completionHandler:(void (^ _Nonnull)(SBCError * _Nullable))completionHandler;
/// Toggles the selection between the front and the back camera.
/// \code
/// func flipCamera(call: DirectCall) {
///    call.switchCamera { error in
///        // do something when error has occurred.
///    }
/// }
///
/// \endcodesince:
/// 1.0.3
/// <ul>
///   <li>
///     See Also: <a href="x-source-tag://VideoDevice">VideoDevice</a>
///   </li>
/// </ul>
/// \param completionHandler Callback completionHandler. Contains error.
///
- (void)switchCameraWithCompletionHandler:(void (^ _Nonnull)(SBCError * _Nullable))completionHandler;
/// Takes a snapshot of remote video view.
/// \code
/// self.call.captureRemoteVideoView { [weak self] (image, error) in
///     if let error = error {
///        // error handling.
///        return
///     }
///     self?.snapshotImageView.image = image
/// }
///
/// \endcodesince:
/// 1.3.0
/// \param completionHandler Callback completion handler that takes snapshot image or error.
///
- (void)captureRemoteVideoViewWithCompletionHandler:(void (^ _Nonnull)(UIImage * _Nullable, SBCError * _Nullable))completionHandler;
/// Takes a snapshot of local video view.
/// \code
/// self.call.captureLocalVideoView { [weak self] (image, error) in
///     if let error = error {
///        // error handling.
///        return
///     }
///     self?.snapshotImageView.image = image
/// }
///
/// \endcodesince:
/// 1.3.0
/// \param completionHandler Callback completion handler that takes snapshot image or error.
///
- (void)captureLocalVideoViewWithCompletionHandler:(void (^ _Nonnull)(UIImage * _Nullable, SBCError * _Nullable))completionHandler;
@end


@interface SBCDirectCall (SWIFT_EXTENSION(SendBirdCalls))
/// Accepts the incoming direct call. SendBirdCalls will continue to process the call with the server.
/// since:
/// 1.0.0
/// \param params Set up the call that you’re receiving. Cannot be empty
///
- (void)acceptWithParams:(SBCAcceptParams * _Nonnull)params;
/// Ends the call. <code>DirectCallDelegate.didEnd(call:)</code> delegate method will be called after successful ending. This delegate will also be called when the remote user ends the call.
/// \code
/// // End a call
/// call.end();
///
/// // receives the event
/// class MyClass: DirectCallDelegate {
///     ...
///     func didEnd(_ call: DirectCall) {
///         //
///     }
///     ...
/// }
///
/// \endcodesince:
/// 1.0.0
- (void)end;
/// Ends the call. This method has a closeHandler that is called when the end message is successfully sent to the server.
/// note:
/// One example of implementing this method is for CallKit implementation, where CXEndCallAction should be fulfilled when call has been ended to ensure that the end command has been sent to the server before the Callkit is terminated and sent to background. Aside from that, you may choose to use the original <code>end()</code> method.
/// \code
/// func provider(_ provider: CXProvider, perform action: CXEndCallAction) {
///     // After Authenticating...
///
///     // End the call
///     call.end {
///         action.fulfill()
///     };
/// }
///
/// \endcodesince:
/// 1.0.0
- (void)endWithCloseHandler:(void (^ _Nullable)(void))closeHandler;
/// Holds the active call.
/// since:
/// 1.8.0
- (void)holdWithCompletionHandler:(void (^ _Nullable)(SBCError * _Nullable))completionHandler;
/// Removes the hold that you put on a call.
/// since:
/// 1.8.0
- (void)unholdWithForce:(BOOL)force completionHandler:(void (^ _Nullable)(SBCError * _Nullable))completionHandler;
/// Mutes the audio of local user. Will trigger <code>DirectCallDelegate.didRemoteAudioSettingsChange()</code> delegate method of the remote user. If the remote user changes their audio settings, local user will be notified via same delegate method.
/// \code
/// // mute my microphone
/// call.muteMicrophone();
///
/// // receives the event
/// class MyClass: DirectCallDelegate {
///     ...
///     func didRemoteAudioSettingsChange(_ call: DirectCall) {
///         if (call.isRemoteAudioEnabled) {
///             // The peer has been unmuted.
///         } else {
///             // The peer has been muted.
///         }
///     }
///     ...
/// }
///
/// \endcodesince:
/// 1.0.0
- (void)muteMicrophone;
/// Unmutes the audio of local user. Will trigger <code>DirectCallDelegate.didRemoteAudioSettingsChange()</code> delegate method of the remote user. If the remote user changes their audio settings, local user will be notified via same delegate method.
/// \code
/// // unmute my microphone
/// call.unmuteMicrophone();
///
/// // receives the event
/// class MyClass: DirectCallDelegate {
///     ...
///     func didRemoteAudioSettingsChange(_ call: DirectCall) {
///         if (call.isRemoteAudioEnabled) {
///             // The peer has been unmuted.
///         } else {
///             // The peer has been muted.
///         }
///     }
///     ...
/// }
///
/// \endcodesince:
/// 1.0.0
- (void)unmuteMicrophone;
/// Updates custom items of the call.
/// since:
/// 1.0.0
/// \param customItems Custom items of [String: String] to be updated or inserted.
///
/// \param completionHandler Callback completionHandler. Contains custom items, changes custom items, and error.
///
- (void)updateCustomItemsWithCustomItems:(NSDictionary<NSString *, NSString *> * _Nonnull)customItems completionHandler:(void (^ _Nonnull)(NSDictionary<NSString *, NSString *> * _Nullable, NSArray<NSString *> * _Nullable, SBCError * _Nullable))completionHandler;
/// Deletes custom items of the call.
/// since:
/// 1.0.0
/// \param customItemKeys Keys of the custom item that you want to delete.
///
/// \param completionHandler Callback completionHandler. Contains custom items, changes custom items, and error.
///
- (void)deleteCustomItemsWithCustomItemKeys:(NSArray<NSString *> * _Nonnull)customItemKeys completionHandler:(void (^ _Nonnull)(NSDictionary<NSString *, NSString *> * _Nullable, NSArray<NSString *> * _Nullable, SBCError * _Nullable))completionHandler;
/// Deletes all custom items of the call.
/// since:
/// 1.0.0
/// \param completionHandler Callback completionHandler. Contains custom items, changes custom items, and error.
///
- (void)deleteAllCustomItemsWithCompletionHandler:(void (^ _Nonnull)(NSDictionary<NSString *, NSString *> * _Nullable, NSArray<NSString *> * _Nullable, SBCError * _Nullable))completionHandler;
@end


@class AVAudioSession;
@class AVAudioSessionRouteDescription;

/// DirectCallDelegate methods are invoked along the flow of the call. You <em>should</em> implement the delegate methods to adjust your app according to the changes to the states of the call.
/// \code
/// override func viewDidLoad() {
///    // ...
///    call.delegate = self
/// }
///
/// // ...
///
/// \endcodesince:
/// 1.0.0
SWIFT_PROTOCOL_NAMED("DirectCallDelegate")
@protocol SBCDirectCallDelegate
@optional
/// Called when the callee has accepted the call, but not yet connected to media streams.
/// since:
/// 1.0.0
- (void)didEstablish:(SBCDirectCall * _Nonnull)call;
@required
/// Called when media streams between the caller and callee are connected and audio/video is enabled.
/// \code
/// func didConnect(_ call: DirectCall) {
///    self.endButton.isEnabled = true
/// }
///
/// \endcodesince:
/// 1.0.0
- (void)didConnect:(SBCDirectCall * _Nonnull)call;
@optional
/// Called when DirectCall begins attempting to reconnect to the server after losing connection.
/// since:
/// 1.0.0
- (void)didStartReconnecting:(SBCDirectCall * _Nonnull)call;
/// Called when DirectCall successfully reconnects to the server.
/// since:
/// 1.0.0
- (void)didReconnect:(SBCDirectCall * _Nonnull)call;
/// Called when the remote user changes audio settings.
/// \code
/// class MyClass: DirectCallDelegate {
///     ...
///     func didRemoteAudioSettingsChange(_ call: DirectCall) {
///         if (call.isRemoteAudioEnabled) {
///             // The peer has been unmuted.
///         } else {
///             // The peer has been muted.
///         }
///     }
///     ...
/// }
///
/// \endcodesince:
/// 1.0.0
- (void)didRemoteAudioSettingsChange:(SBCDirectCall * _Nonnull)call;
/// Called when the peer changes video settings.
/// since:
/// 1.0.0
- (void)didRemoteVideoSettingsChange:(SBCDirectCall * _Nonnull)call;
@required
/// Called when the call has ended.
/// \code
/// func didEnd(_ call: DirectCall) {
///    self.dismiss(animated: true, completion: nil)
/// }
///
/// \endcodesince:
/// 1.0.0
- (void)didEnd:(SBCDirectCall * _Nonnull)call;
@optional
/// Called when the audio device has been changed. To change audio route, see <a href="x-source-tag://routePickerView(frame)">routePickerView(frame:)</a>
/// \code
/// func didAudioDeviceChange(_ call: DirectCall, session: AVAudioSession, previousRoute: AVAudioSessionRouteDescription, reason: AVAudioSession.RouteChangeReason) {
///    // You can get current audio I/O, available inputs from the session. You can also set preferred input.
///    
///    let currentRoute = session.currentRoute
///    let outputs = currentRoute.outputs
///    let inputs = currentRoute.inputs
///
///    // Update your UI according to the changes to the audio devices, such as external speaker, bluetooth, and built-in speaker.
/// }
///
/// \endcodesince:
/// 1.0.0
/// <ul>
///   <li>
///     See Also:
///     <ul>
///       <li>
///         <a href="x-source-tag://routePickerView(frame:)">routePickerView(frame:)</a>
///       </li>
///     </ul>
///   </li>
/// </ul>
/// \param call <code>DirectCall</code> object
///
/// \param session A shared instance of <code>AVAudiosession</code>. You can get a current audio route containing inputs and outputs descriptions.
///
/// \param previousRoute A previous audio route.
///
/// \param reason The reason of system audio change.
///
- (void)didAudioDeviceChange:(SBCDirectCall * _Nonnull)call session:(AVAudioSession * _Nonnull)session previousRoute:(AVAudioSessionRouteDescription * _Nonnull)previousRoute reason:(AVAudioSessionRouteChangeReason)reason;
/// Called when the custom items of the call are updated.
/// since:
/// 1.0.0
/// \param call DirectCall that has updated custom items.
///
/// \param updatedKeys keys that have updated.
///
- (void)didUpdateCustomItemsWithCall:(SBCDirectCall * _Nonnull)call updatedKeys:(NSArray<NSString *> * _Nonnull)updatedKeys;
/// Called when the custom items of the call are deleted.
/// since:
/// 1.0.0
/// \param call DirectCall that has deleted custom items.
///
/// \param deletedKeys keys that have deleted.
///
- (void)didDeleteCustomItemsWithCall:(SBCDirectCall * _Nonnull)call deletedKeys:(NSArray<NSString *> * _Nonnull)deletedKeys;
/// Called when the other user’s recording status is changed. You can check the recording status of the other user with <code>DirectCall.remoteRecordingStatus</code>.
/// since:
/// 1.4.0
/// \param call DirectCall that has updated remote recording status.
///
- (void)didRemoteRecordingStatusChange:(SBCDirectCall * _Nonnull)call;
/// The local or remote user has put a call on hold or removed a hold from a call and their hold status has changed.
/// since:
/// 1.8.0
/// \param call DirectCall that has updated user hold status
///
/// \param isLocalUser Returns true if the user whose hold status changed is local user
///
/// \param isUserOnHold Returns true if the user’s hold status is changed to on hold
///
- (void)didUserHoldStatusChange:(SBCDirectCall * _Nonnull)call isLocalUser:(BOOL)isLocalUser isUserOnHold:(BOOL)isUserOnHold;
/// Called when the callee has received the <code>SendBirdCallDelegate.didStartRinging</code>  delegate method. This indicates that the calle has received the call notification.
/// \param call DirectCall that the callee received
///
- (void)didCalleeReceiveDial:(SBCDirectCall * _Nonnull)call;
@end

/// End results for DirectCall. Indicates reasons for failure or completion. Value for an ongoing call is <code>none</code>.
/// since:
/// 1.0.0
typedef SWIFT_ENUM_NAMED(NSInteger, SBCDirectCallEndResult, "DirectCallEndResult", open) {
/// Default value of the EndResult.
/// since:
/// 1.0.0
  SBCDirectCallEndResultNone = 0,
/// The call has ended by either the caller or callee after successful connection.
/// since:
/// 1.0.0
  SBCDirectCallEndResultCompleted = 1,
/// The caller has canceled the call before the callee accepts or declines.
/// since:
/// 1.0.0
  SBCDirectCallEndResultCanceled = 2,
/// The callee has declined the call.
/// since:
/// 1.0.0
  SBCDirectCallEndResultDeclined = 3,
/// The call is accepted on one of the callee’s other devices. All the other devices will receive this call result.
/// since:
/// 1.0.0
  SBCDirectCallEndResultOtherDeviceAccepted = 4,
/// SendBird server failed to establish a media session between the caller and callee within a specific period of time.
/// since:
/// 1.0.0
  SBCDirectCallEndResultTimedOut = 5,
/// Data streaming from either the caller or the callee has stopped due to a WebRTC connection issue while calling.
/// since:
/// 1.0.0
  SBCDirectCallEndResultConnectionLost = 6,
/// The callee hasn’t either accepted or declined the call for a specific period of time.
/// since:
/// 1.0.0
  SBCDirectCallEndResultNoAnswer = 7,
/// The dial() method of the call has failed.
/// since:
/// 1.0.0
  SBCDirectCallEndResultDialFailed = 8,
/// The accept() method of the call has failed.
/// since:
/// 1.0.0
  SBCDirectCallEndResultAcceptFailed = 9,
/// since:
/// 1.0.0
  SBCDirectCallEndResultUnknown = 10,
  SBCDirectCallEndResultNotConnected = 11,
};


/// Direct Call Log containing information about a direct call.
/// since:
/// 1.0.0
SWIFT_CLASS_NAMED("DirectCallLog")
@interface SBCDirectCallLog : NSObject
/// Call Id of the Call
/// since:
/// 1.0.0
@property (nonatomic, readonly, copy) NSString * _Nonnull callId;
/// If the call log data is from server, it returns <code>true</code>
/// since:
/// 1.1.0
@property (nonatomic, readonly) BOOL isFromServer;
/// The started time of the Call. Int64 of miliseconds.
/// since:
/// 1.0.0
@property (nonatomic, readonly) int64_t startedAt;
/// The ended time of the Call. Int64 of miliseconds.
/// since:
/// 1.0.0
@property (nonatomic, readonly) int64_t endedAt;
/// The duration of the Call. Int64 of miliseconds.
/// since:
/// 1.0.0
@property (nonatomic, readonly) int64_t duration;
/// DirectCallUser that ended the call.
/// since:
/// 1.0.0
@property (nonatomic, readonly, strong) SBCDirectCallUser * _Nullable endedBy;
/// The caller of the call.
/// since:
/// 1.0.0
@property (nonatomic, readonly, strong) SBCDirectCallUser * _Nullable caller;
/// The callee of the call.
/// since:
/// 1.0.0
@property (nonatomic, readonly, strong) SBCDirectCallUser * _Nullable callee;
/// The end result of the call.
/// since:
/// 1.0.0
@property (nonatomic, readonly) enum SBCDirectCallEndResult endResult;
/// The role of the current user in the call.
/// since:
/// 1.0.0
@property (nonatomic, readonly) enum SBCDirectCallUserRole myRole;
/// A boolean value indicating whether the call is video call.
/// since:
/// 1.0.0
@property (nonatomic, readonly) BOOL isVideoCall;
/// Custom items of DirectCallLog instance.
/// since:
/// 1.0.0
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nonnull customItems;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



@interface SBCDirectCallLog (SWIFT_EXTENSION(SendBirdCalls))
/// The hash value of <code>DirectCallLog</code>.
@property (nonatomic, readonly) NSUInteger hash;
/// Returns a Boolean value that indicates whether the <code>DirectCallLog</code> and a given object are equal.
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end

enum UserRoleFilter : NSInteger;

/// A user’s call history is available via a <code>DirectCallLogListQuery</code> instance.
/// \code
/// let params = DirectCallLogListQuery.Params()
/// let query = SendBirdCall.createDirectCallLogListQuery(with: params)
///
/// query.next { callLogs, error in
///     //
/// }
///
/// \endcodesince:
/// 1.0.0
SWIFT_CLASS_NAMED("DirectCallLogListQuery")
@interface SBCDirectCallLogListQuery : NSObject
/// If <code>true</code>, call history is being retrieved from SendBirdCall server. The default value is <code>false</code>
/// since:
/// 1.0.0
@property (nonatomic, readonly) BOOL isLoading;
/// If <code>true</code>, there is more call history to be retrieved. The default value is <code>true</code>.
/// since:
/// 1.0.0
@property (nonatomic, readonly) BOOL hasNext;
/// Returns call logs of the specified role. For example, <code>setMyRole(Callee)</code> returns only the callee’s call logs.
/// since:
/// 1.0.0
@property (nonatomic, readonly) enum UserRoleFilter myRole;
/// Returns <code>endResults</code> as a <code>NSArray</code>.
/// since:
/// 1.0.0
@property (nonatomic, readonly, strong) NSArray * _Nonnull endResultsArray;
/// The number of call logs to return at once. This is read-only property. If you want to set the limit, see <a href="x-source-tag://limit">Param.limit</a>
/// note:
/// The maximum value is 100 and the minimum is 1.
/// since:
/// 1.0.0
/// <ul>
///   <li>
///     See Also: <a href="x-source-tag://limit">Param.limit</a>
///   </li>
/// </ul>
@property (nonatomic, readonly) int32_t limit;
/// Used to query call history from SendBirdCall server.
/// since:
/// 1.0.0
- (void)nextWithCompletionHandler:(void (^ _Nonnull)(NSArray<SBCDirectCallLog *> * _Nullable, SBCError * _Nullable))completionHandler;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Filter for DirectCallLogListQuery of specific type of user in a call.
/// since:
/// 1.0.0
/// <ul>
///   <li>
///     Cases:
///     <ul>
///       <li>
///         caller: Caller in a call.
///       </li>
///       <li>
///         callee: Callee in a call.
///       </li>
///       <li>
///         all: all users.
///       </li>
///     </ul>
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSInteger, UserRoleFilter, open) {
/// Caller in a call.
/// since:
/// 1.0.0
  UserRoleFilterCaller = 0,
/// Callee in a call.
/// since:
/// 1.0.0
  UserRoleFilterCallee = 1,
/// All users.
/// since:
/// 1.0.0
  UserRoleFilterAll = 2,
};


/// Parameters for configuring DirectCallLogListQuery
/// \code
/// let params = DirectCallLogListQuery.Params()
/// let query = SendBirdCall.createDirectCallLogListQuery(with: params)
/// query.next { callLogs, error in
///     //
/// }
///
/// \endcodesince:
/// 1.0.0
SWIFT_CLASS_NAMED("Params")
@interface SBCDirectCallLogListQueryParams : NSObject
/// Filter for specified role in the calls. For example, <code>.callee</code> will only return callee’s call logs.
/// since:
/// 1.0.0
@property (nonatomic) enum UserRoleFilter myRole;
/// Returns <code>endResults</code> as a <code>NSArray</code>.
/// since:
/// 1.0.0
@property (nonatomic, readonly, strong) NSArray * _Nonnull endResultsArray;
/// Adds DirectCallEndResult to <code>endResults</code>.
/// since:
/// 1.0.0
/// \param endResult DirectCallEndResult to be added to the filter.
///
- (void)addEndResult:(enum SBCDirectCallEndResult)endResult;
/// Removes DirectCallEndResult from <code>endResults</code>.
/// since:
/// 1.0.0
/// \param endResult DirectCallEndResult to be removed from the filter.
///
- (void)removeEndResult:(enum SBCDirectCallEndResult)endResult;
/// Specifies the number of call logs to return at once.
/// note:
/// The maximum value is 100 and the minimum is 1.
/// since:
/// 1.0.0
@property (nonatomic) int32_t limit;
/// since:
/// 1.0.0
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Class for SendBirdCalls User.
/// since:
/// 1.0.0
SWIFT_CLASS_NAMED("User")
@interface SBCUser : NSObject
/// The user ID of the call user.
/// since:
/// 1.0.0
@property (nonatomic, readonly, copy) NSString * _Nonnull userId;
/// The nickname of the user.
/// since:
/// 1.0.0
@property (nonatomic, readonly, copy) NSString * _Nullable nickname;
/// The profile image URL of the user.
/// since:
/// 1.0.0
@property (nonatomic, readonly, copy) NSString * _Nullable profileURL;
/// Metadata of the user.
/// since:
/// 1.0.0
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nullable metadata;
/// Activity status of the user. If it is <code>false</code>, the user is offline. The default value is <code>false</code>.
/// since:
/// 1.0.0
@property (nonatomic, readonly) BOOL isActive;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// User class specific for direct call.
/// since:
/// 1.0.0
SWIFT_CLASS_NAMED("DirectCallUser")
@interface SBCDirectCallUser : SBCUser
/// Shows whether the user is caller or callee.
/// since:
/// 1.0.0
@property (nonatomic, readonly) enum SBCDirectCallUserRole role;
@end


@interface SBCDirectCallUser (SWIFT_EXTENSION(SendBirdCalls))
/// The hash value of <code>DirectCallUser</code>.
@property (nonatomic, readonly) NSUInteger hash;
/// Returns a Boolean value that indicates whether the <code>DirectCallUser</code> and a given object are equal.
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
/// Returns a copied instance of the <code>DirectCallUser</code>.
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
@end

enum SBCParticipantState : NSInteger;

/// A class that provides information about a participant and methods to set a participant’s audio and video.
/// since:
/// 1.6.0
SWIFT_CLASS_NAMED("Participant")
@interface SBCParticipant : NSObject
/// A unique identifier for a participant in a room.
/// since:
/// 1.6.0
@property (nonatomic, readonly, copy) NSString * _Nonnull participantId;
/// Indicates a user in Calls who corresponds to the participant.
/// since:
/// 1.6.0
@property (nonatomic, readonly, strong) SBCUser * _Nonnull user;
/// The participant’s <code>SendBirdVideoView</code>.
/// since:
/// 1.6.0
@property (nonatomic, weak) SBCVideoView * _Nullable videoView;
/// The timestamp of when the participant enter the room, in Unix milliseconds.
/// since:
/// 1.6.0
@property (nonatomic, readonly) int64_t enteredAt;
/// The timestamp of when the participant information was updated within the room, in Unix milliseconds.
/// since:
/// 1.6.0
@property (nonatomic, readonly) int64_t updatedAt;
/// The timestamp of when the participant exited the room, in Unix milliseconds. If the value is 0, it means the participant is present in the room.
/// since:
/// 1.6.0
@property (nonatomic, readonly) int64_t exitedAt;
/// The period from the time when the participant entered the room to the time the participant left the room, measured in seconds. If the value is 0, it means the participant is present in the room.
/// since:
/// 1.6.0
@property (nonatomic, readonly) int64_t duration;
/// The state of the participant. Valid values are entered, exited, and connected.
/// since:
/// 1.6.0
@property (nonatomic, readonly) enum SBCParticipantState state;
/// Indicates whether the participant has enabled their audio.
/// since:
/// 1.6.0
@property (nonatomic, readonly) BOOL isAudioEnabled;
/// Indicates whether the participant has enabled their video.
/// since:
/// 1.6.0
@property (nonatomic, readonly) BOOL isVideoEnabled;
/// The hash value of <code>Participant</code>.
@property (nonatomic, readonly) NSUInteger hash;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// A enum that provides information about the state of a participant.
/// since:
/// 1.6.0
typedef SWIFT_ENUM_NAMED(NSInteger, SBCParticipantState, "State", open) {
/// Indicates that a participant entered the room.
/// since:
/// 1.6.0
  SBCParticipantStateEntered = 0,
/// Indicates that a participant is connected and streaming media.
/// since:
/// 1.6.0
  SBCParticipantStateConnected = 1,
/// Indicates that a participant exited the room.
/// since:
/// 1.6.0
  SBCParticipantStateExited = 2,
};


/// A class that contains all operational methods of a local participant to handle their audio and video.
/// note:
/// LocalParticipant contains all properties of Participant
/// since:
/// 1.6.0
SWIFT_CLASS_NAMED("LocalParticipant")
@interface SBCLocalParticipant : SBCParticipant
/// Mutes the local user’s audio.
/// since:
/// 1.6.0
- (void)muteMicrophone;
/// Unmutes the local user’s audio.
/// since:
/// 1.6.0
- (void)unmuteMicrophone;
/// Starts the local user’s video.
/// since:
/// 1.6.0
- (void)startVideo;
/// Stops the local user’s video.
/// since:
/// 1.6.0
- (void)stopVideo;
/// Switches the local user’s front and back cameras.
/// \code
/// call.switchCamera { error in
///    // handle error
/// }
///
/// \endcodesince:
/// 1.6.0
/// \param completionHandler Callback completion handler containing error.
///
- (void)switchCameraWithCompletionHandler:(void (^ _Nonnull)(SBCError * _Nullable))completionHandler;
@end









enum SBCRecordingType : NSInteger;
@class NSURL;

/// Recording option that is used when starting a recording session.
/// since:
/// 1.3.0
SWIFT_CLASS_NAMED("RecordingOptions")
@interface SBCRecordingOptions : NSObject
/// Used to specify a type of recording that specifies which participant or media to record such as <code>remoteAudioAndVideo</code>.
/// since:
/// 1.3.0
@property (nonatomic, readonly) enum SBCRecordingType recordingType;
/// Used to specify the base directory path of where the recorded file will be saved
/// since:
/// 1.3.0
@property (nonatomic, readonly, copy) NSURL * _Nonnull directoryPath;
/// Used to specify a name of the recorded file. If unspecified, it will be saved as <code>{type}_{callId}_{timestamp}</code>.
/// since:
/// 1.3.0
@property (nonatomic, readonly, copy) NSString * _Nullable fileName;
- (nonnull instancetype)initWithRecordingType:(enum SBCRecordingType)recordingType directoryPath:(NSURL * _Nonnull)directoryPath fileName:(NSString * _Nullable)fileName OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE_MSG("Use `init(recordingType:directoryPath:fileName:)` instead.");
@end

typedef SWIFT_ENUM_NAMED(NSInteger, SBCRecordingType, "RecordingType", open) {
/// An option to record the video and audio of the remote user
/// since:
/// 1.3.0
  SBCRecordingTypeRemoteAudioAndVideo = 0,
/// An option to record the audio of the remote user.
/// since:
/// 1.3.0
  SBCRecordingTypeRemoteAudioOnly = 1,
/// An option to record both audios of the local and remote users.
/// since:
/// 1.3.0
  SBCRecordingTypeLocalRemoteAudios = 2,
/// An option to record both audios of the local and remote users, and the video of the remote user.
/// since:
/// 1.3.0
  SBCRecordingTypeLocalAudioRemoteAudioAndVideo = 3,
/// An option to record both audios of the local and remote users, and the video of the local user.
/// since:
/// 1.3.0
  SBCRecordingTypeLocalAudioAndVideoRemoteAudio = 4,
};

/// Recording status that indicates the recording status of a call.
/// since:
/// 1.4.0
typedef SWIFT_ENUM_NAMED(NSInteger, SBCRecordingStatus, "RecordingStatus", open) {
  SBCRecordingStatusRecording = 0,
  SBCRecordingStatusNone = 1,
};


/// A class that contains all operational methods of a remote participant.
/// since:
/// 1.6.0
/// note:
/// RemoteParticipant contains all properties of Participant
SWIFT_CLASS_NAMED("RemoteParticipant")
@interface SBCRemoteParticipant : SBCParticipant
@end

enum SBCRoomState : NSInteger;
enum RoomType : NSInteger;
@class SBCRoomEnterParams;
@protocol SBCRoomDelegate;
@class RoomInvitation;

/// A class that provides the <code>enter()</code>, <code>exit()</code>, and other methods, which handle information about the room and operate with other types of objects such as a participant.
/// since:
/// 1.6.0
SWIFT_CLASS_NAMED("Room")
@interface SBCRoom : NSObject
/// Returns a room ID.
/// since:
/// 1.6.0
@property (nonatomic, readonly, copy) NSString * _Nonnull roomId;
/// The timestamp of when the room was created, in Unix milliseconds.
/// since:
/// 1.6.0
@property (nonatomic, readonly) int64_t createdAt;
/// The ID of a user who created a room.
/// since:
/// 1.6.0
@property (nonatomic, readonly, copy) NSString * _Nonnull createdBy;
/// The local participant in a room.
/// since:
/// 1.6.0
@property (nonatomic, readonly, strong) SBCLocalParticipant * _Nullable localParticipant;
/// The list of all participants in a room.
/// since:
/// 1.6.0
@property (nonatomic, readonly, copy) NSArray<SBCParticipant *> * _Nonnull participants;
/// The list of remote participants in a room.
/// since:
/// 1.6.0
@property (nonatomic, readonly, copy) NSArray<SBCRemoteParticipant *> * _Nonnull remoteParticipants;
/// The state of a room. Valid values are <code>.open</code> and <code>.deleted</code>.
/// since:
/// 1.6.0
@property (nonatomic, readonly) enum SBCRoomState state;
/// Indicates the room type as audio or video and the capacity of a room.
/// since:
/// 1.6.0
@property (nonatomic, readonly) enum RoomType type;
/// Custom items for this room
/// since:
/// 1.8.0
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nonnull customItems;
/// Enters a room. The participant’s audio or video can be configured with <code>RoomEnterParams</code> when entering.
/// since:
/// 1.6.0
/// \param completionHandler Callback completionHandler to be called after entering the room.
///
- (void)enterWithParams:(SBCRoomEnterParams * _Nonnull)params completionHandler:(void (^ _Nonnull)(SBCError * _Nullable))completionHandler;
/// Exits a room.
/// since:
/// 1.6.0
///
/// throws:
/// 1800702 error code if the participant is not in the room and the request can’t be processed.
- (BOOL)exitAndReturnError:(NSError * _Nullable * _Nullable)error;
/// Get latest custom items for this room
- (void)fetchCustomItemsWithCompletionHandler:(void (^ _Nonnull)(NSDictionary<NSString *, NSString *> * _Nullable, SBCError * _Nullable))completionHandler;
/// Updates custom items for this room.
/// since:
/// 1.8.0
/// \param customItems Custom items (String dictionary) to be updated or inserted.
///
/// \param completionHandler Callback completionHandler. Contains custom items, changes custom items, and error.
///
- (void)updateCustomItemsWithCustomItems:(NSDictionary<NSString *, NSString *> * _Nonnull)customItems completionHandler:(void (^ _Nonnull)(NSDictionary<NSString *, NSString *> * _Nullable, NSArray<NSString *> * _Nullable, SBCError * _Nullable))completionHandler;
/// Deletes custom items of the call.
/// since:
/// 1.8.0
/// \param customItemKeys Keys of the custom item that you want to delete.
///
/// \param completionHandler Callback completionHandler. Contains custom items, changes custom items, and error.
///
- (void)deleteCustomItemsWithCustomItemKeys:(NSArray<NSString *> * _Nonnull)customItemKeys completionHandler:(void (^ _Nonnull)(NSDictionary<NSString *, NSString *> * _Nullable, NSArray<NSString *> * _Nullable, SBCError * _Nullable))completionHandler;
/// Deletes all custom items of the call.
/// since:
/// 1.8.0
/// \param completionHandler Callback completionHandler. Contains custom items, changes custom items, and error.
///
- (void)deleteAllCustomItemsWithCompletionHandler:(void (^ _Nonnull)(NSDictionary<NSString *, NSString *> * _Nullable, NSArray<NSString *> * _Nullable, SBCError * _Nullable))completionHandler;
/// Adds <code>RoomDelegate</code> to receive events about a room.
/// \code
/// room.addDelegate(self, identifier: UNIQUE_ID)
///
/// \endcodesince:
/// 1.6.0
/// \param delegate <code>RoomDelegate</code> that listens to <code>Room</code> events.
///
/// \param identifier Identifier for the specific delegate.
///
- (void)addDelegate:(id <SBCRoomDelegate> _Nonnull)delegate identifier:(NSString * _Nonnull)identifier;
/// Removes a delegate to stop receiving events about a room.
/// \code
/// room.removeDelegate(identifier: UNIQUE_ID)
///
/// \endcodesince:
/// 1.6.0
/// \param identifier String identifier for the delegate. If the room doesn’t have the given identifier, it will be ignored.
///
- (void)removeDelegateWithIdentifier:(NSString * _Nonnull)identifier;
/// Removes all delegate to stop receiving events about a room.
/// since:
/// 1.6.0
- (void)removeAllDelegates;
/// Send an invitation to the specified user to enter the room.
/// since:
/// 1.10.0
- (void)sendInvitationWithInvitee:(NSString * _Nonnull)invitee completionHandler:(void (^ _Nullable)(RoomInvitation * _Nullable, SBCError * _Nullable))completionHandler;
/// Deletes the room. All participants in the room will be exited and the room can’t be restored.
/// since:
/// 1.10.0
- (void)deleteWithCompletionHandler:(void (^ _Nullable)(SBCError * _Nullable))completionHandler;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface SBCRoom (SWIFT_EXTENSION(SendBirdCalls))
@end

/// A enum that provides information about the state of a room.
/// since:
/// 1.6.0
typedef SWIFT_ENUM_NAMED(NSInteger, SBCRoomState, "State", open) {
/// Indicates a room is open and available for group calls.
/// since:
/// 1.6.0
  SBCRoomStateOpen = 0,
/// Indicates a room is deleted.
/// since:
/// 1.6.0
  SBCRoomStateDeleted = 1,
};



@interface SBCRoom (SWIFT_EXTENSION(SendBirdCalls))
@end


/// A class that provides the methods to enable audio and video settings.
/// since:
/// 1.6.0
SWIFT_CLASS_NAMED("EnterParams")
@interface SBCRoomEnterParams : NSObject
/// Enables a participant’s video settings when entering a room.
/// since:
/// 1.6.0
@property (nonatomic) BOOL isVideoEnabled;
/// Enables a participant’s audio settings when entering a room.
@property (nonatomic) BOOL isAudioEnabled;
/// since:
/// 1.10.3
@property (nonatomic) BOOL kickSiblings;
/// Initializes <code>RoomEnterParams</code>.
/// \param isVideoEnabled if <code>true</code>, enables a participant’s video settings when entering a room.
///
/// \param isAudioEnabled if <code>true</code>, enables a participant’s audio settings when entering a room.
///
- (nonnull instancetype)initWithIsVideoEnabled:(BOOL)isVideoEnabled isAudioEnabled:(BOOL)isAudioEnabled kickSiblings:(BOOL)kickSiblings OBJC_DESIGNATED_INITIALIZER;
/// Initializes <code>RoomEnterParams</code>.
- (nonnull instancetype)init;
@end






/// RoomDelegate methods are invoked along the flow of the room. You <em>should</em> implement the delegate methods to adjust your app according to the changes to the states of the room.
/// \code
/// override func viewDidLoad() {
///    // ...
///    room.addDelegate(self, identifier: "identifier")
/// }
///
/// // ...
///
/// \endcodesince:
/// 1.6.0
SWIFT_PROTOCOL_NAMED("RoomDelegate")
@protocol SBCRoomDelegate
@optional
/// Called when a remote participant has entered a room.
/// since:
/// 1.6.0
/// <ul>
///   <li>
///     Parameters
///     <ul>
///       <li>
///         participant: <code>RemoteParticipant</code> object.
///       </li>
///     </ul>
///   </li>
/// </ul>
- (void)didRemoteParticipantEnter:(SBCRemoteParticipant * _Nonnull)participant;
/// Called when a remote participant has exited a room.
/// since:
/// 1.6.0
/// <ul>
///   <li>
///     Parameters
///     <ul>
///       <li>
///         participant: <code>RemoteParticipant</code> object.
///       </li>
///     </ul>
///   </li>
/// </ul>
- (void)didRemoteParticipantExit:(SBCRemoteParticipant * _Nonnull)participant;
/// Called when a remote participant has started media streaming
/// since:
/// 1.6.0
/// <ul>
///   <li>
///     Parameters
///     <ul>
///       <li>
///         participant: <code>RemoteParticipant</code> object.
///       </li>
///     </ul>
///   </li>
/// </ul>
- (void)didRemoteParticipantStreamStart:(SBCRemoteParticipant * _Nonnull)participant;
/// Called when a remote partcipant’s audio settings has changed.
/// since:
/// 1.6.0
/// <ul>
///   <li>
///     Parameters
///     <ul>
///       <li>
///         participant: <code>RemoteParticipant</code> object.
///       </li>
///     </ul>
///   </li>
/// </ul>
- (void)didRemoteAudioSettingsChange:(SBCRemoteParticipant * _Nonnull)participant;
/// Called when a remote participant’s video settings has changed.
/// since:
/// 1.6.0
/// <ul>
///   <li>
///     Parameters
///     <ul>
///       <li>
///         participant: <code>RemoteParticipant</code> object.
///       </li>
///     </ul>
///   </li>
/// </ul>
- (void)didRemoteVideoSettingsChange:(SBCRemoteParticipant * _Nonnull)participant;
/// Invoked when the local participant’s connection with the server has been interrupted.
/// since:
/// 1.10.1
/// \param participant <code>LocalParticipant</code> object
///
- (void)didLocalParticipantDisconnect:(SBCLocalParticipant * _Nonnull)participant;
/// Invoked when the local participant’s connection with the server has been established.
/// since:
/// 1.10.1
/// \param participant <code>LocalParticipant</code> object
///
- (void)didLocalParticipantReconnect:(SBCLocalParticipant * _Nonnull)participant;
/// Called when the custom items of the room are updated.
/// since:
/// 1.8.0
/// \param updatedKeys keys that have updated.
///
- (void)didCustomItemsUpdateWithUpdatedKeys:(NSArray<NSString *> * _Nonnull)updatedKeys;
/// Called when the custom items of the room are deleted.
/// since:
/// 1.8.0
/// \param deletedKeys keys that have deleted.
///
- (void)didCustomItemsDeleteWithDeletedKeys:(NSArray<NSString *> * _Nonnull)deletedKeys;
/// Called when an error occurs on Sendbird server while processing a request.
/// since:
/// 1.6.0
/// <ul>
///   <li>
///     Parameters
///     <ul>
///       <li>
///         error: <code>Error</code> object.
///       </li>
///     </ul>
///   </li>
/// </ul>
- (void)didReceiveError:(SBCError * _Nonnull)error participant:(SBCParticipant * _Nullable)participant;
/// Called when the room has been deleted
/// since:
/// 1.9.0
- (void)didDelete;
- (void)didAudioDeviceChange:(SBCRoom * _Nonnull)room session:(AVAudioSession * _Nonnull)session previousRoute:(AVAudioSessionRouteDescription * _Nonnull)previousRoute reason:(AVAudioSessionRouteChangeReason)reason;
/// Invoked when the inviter cancels the invitation.
/// since:
///
- (void)wasInvitationCanceled:(RoomInvitation * _Nonnull)invitation;
/// Invoked when the invitee accepts the invitation to enter the room.
/// since:
///
- (void)wasInvitationAccepted:(RoomInvitation * _Nonnull)invitation;
/// Invoked when the invitee declines the invitation to enter the room.
/// since:
///
- (void)wasInvitationDeclined:(RoomInvitation * _Nonnull)invitation;
@end


/// A class that provides information about an invitation.
/// since:
/// 1.10.0
SWIFT_CLASS("_TtC13SendBirdCalls14RoomInvitation")
@interface RoomInvitation : NSObject
/// The user who sent the invitation.
/// since:
/// 1.10.0
@property (nonatomic, readonly, strong) SBCUser * _Nonnull inviter;
/// The user to whom the invitation is sent.
/// since:
/// 1.10.0
@property (nonatomic, readonly, strong) SBCUser * _Nonnull invitee;
/// Accepts an invitation to enter the room.
/// since:
/// 1.10.0
- (void)acceptWithCompletionHandler:(void (^ _Nullable)(SBCError * _Nullable))completionHandler;
/// Declines an invitation to enter the room.
/// since:
/// 1.10.0
- (void)declineWithCompletionHandler:(void (^ _Nullable)(SBCError * _Nullable))completionHandler;
/// Cancels an invitation sent to the specified user.
/// since:
/// 1.10.0
- (void)cancelWithCompletionHandler:(void (^ _Nullable)(SBCError * _Nullable))completionHandler;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// A class that is used to query Rooms.
/// since:
/// 1.7.0
SWIFT_CLASS_NAMED("RoomListQuery")
@interface SBCRoomListQuery : NSObject
/// Determines whether the query is loading.
/// since:
/// 1.7.0
@property (nonatomic) BOOL isLoading;
/// Indicates whether there are more rooms to be queried.
/// since:
/// 1.7.0
@property (nonatomic) BOOL hasNext;
/// Retrieves the list of rooms after the last result set.
/// since:
/// 1.7.0
/// \param completionHandler A callback function that receives information about a list of rooms or an error from Sendbird server.
///
- (void)nextWithCompletionHandler:(void (^ _Nonnull)(NSArray<SBCRoom *> * _Nullable, SBCError * _Nullable))completionHandler;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class SBCRange;

/// A class that provides configuration for RoomListQuery
/// since:
/// 1.7.0
SWIFT_CLASS_NAMED("Params")
@interface SBCRoomListQueryParams : NSObject
/// The number of rooms to be retrieved at once.
/// since:
/// 1.7.0
@property (nonatomic) NSUInteger limit;
/// Filters query results to include rooms with the specified room type.
/// since:
/// 1.7.0
- (NSArray * _Nonnull)getTypes SWIFT_WARN_UNUSED_RESULT;
/// Filters query results to include room with the specified room state.
/// since:
/// 1.7.0
- (NSArray * _Nonnull)getState SWIFT_WARN_UNUSED_RESULT;
/// Filters query results to include rooms that were created by specified user IDs.
/// since:
/// 1.7.0
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull createdByUserIds;
/// Filters query results to include rooms that match the specified room IDs.
/// since:
/// 1.7.0
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull roomIds;
/// Filters query results to include rooms that were created between the specified range of time.
/// since:
/// 1.7.0
@property (nonatomic, strong) SBCRange * _Nonnull createdAtRange;
/// Filters query results to include rooms with the specified range of numbers for current participants.
/// since:
/// 1.7.0
@property (nonatomic, strong) SBCRange * _Nonnull currentParticipantCountRange;
/// Filters query results to include rooms with the specified room type.
/// since:
/// 1.7.0.
- (nonnull instancetype)setType:(enum RoomType)type;
/// Filters query results to include room with the specified room state.
/// since:
/// 1.7.0.
- (nonnull instancetype)setState:(enum SBCRoomState)state;
/// Filters query results to include rooms with the specified range of numbers for current participants.
/// since:
/// 1.7.0
- (nonnull instancetype)setRangeForCurrentParticipantCount:(NSRange)range;
/// Filters query results to include rooms that were created between the specified range of time.
/// since:
/// 1.7.0
- (nonnull instancetype)setRangeForCreatedAt:(NSRange)range;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// A class that provides information for creating a new room
/// since:
/// 1.6.0
SWIFT_CLASS_NAMED("RoomParams")
@interface SBCRoomParams : NSObject
/// Sets the type of the room. Valid values are <code>smallRoomForVideo</code> and <code>largeRoomForAudioOnly</code>.
/// since:
/// 1.6.0
@property (nonatomic) enum RoomType roomType;
/// Sets custom items for the room
/// since:
/// 1.8.0
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nullable customItems;
/// Initializes <code>RoomParams</code>.
/// since:
/// 1.6.0
/// \param roomType Sets the type of the room. Valid values are <code>smallRoomForVideo</code> and <code>largeRoomForAudioOnly</code>.
///
- (nonnull instancetype)initWithRoomType:(enum RoomType)roomType OBJC_DESIGNATED_INITIALIZER;
/// Initializes <code>RoomParams</code>.
/// since:
/// 1.8.0
/// \param roomType Sets the type of the room. Valid values are <code>smallRoomForVideo</code> and <code>largeRoomForAudioOnly</code>.
///
/// \param customItems Custom items for this room
///
- (nonnull instancetype)initWithRoomType:(enum RoomType)roomType customItems:(NSDictionary<NSString *, NSString *> * _Nonnull)customItems OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE_MSG("Use `init(roomType:)` instead.");
@end

/// An enum that represents different types of a room.
/// since:
/// 1.6.0
typedef SWIFT_ENUM(NSInteger, RoomType, open) {
/// Type of a room that supports audio and video, can have up to 6 participants.
/// since:
/// 1.6.0
  RoomTypeSmallRoomForVideo = 0,
/// Type of a room that only supports audio and can have up to 20 participants.
/// since:
/// 1.6.0
  RoomTypeLargeRoomForAudioOnly = 1,
};

enum SBCErrorCode : NSInteger;
@class NSCoder;

/// Custom Error class for SendBirdCalls. Subclass of NSError.
/// since:
/// 1.0.0
SWIFT_CLASS("_TtC13SendBirdCalls8SBCError")
@interface SBCError : NSError
/// Error Code that represents the type of the error.
/// since:
/// 1.0.6
@property (nonatomic, readonly) enum SBCErrorCode errorCode;
- (nonnull instancetype)initWithDomain:(NSString * _Nonnull)domain code:(NSInteger)code userInfo:(NSDictionary<NSString *, id> * _Nullable)userInfo SWIFT_UNAVAILABLE;
/// since:
/// 1.0.0
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

/// Custom Error codes representing different error scenarios.
/// since:
/// 1.0.0
typedef SWIFT_ENUM_NAMED(NSInteger, SBCErrorCode, "ErrorCode", open) {
/// since:
/// 1.0.0
  SBCErrorCodeDialCanceled = 1800100,
/// since:
/// 1.0.0
  SBCErrorCodeMyUserIdNotAllowed = 1800101,
/// since:
/// 1.0.0
  SBCErrorCodeRequestFailed = 1800200,
/// since:
/// 1.0.0
  SBCErrorCodeWebsocketConnectionNotOpened = 1800201,
/// since:
/// 1.0.0
  SBCErrorCodeWebsocketConnectionFailed = 1800202,
/// since:
/// 1.0.0
  SBCErrorCodeNoResponseDueToTimeout = 1800203,
/// since:
/// 1.0.0
  SBCErrorCodeRequestFailedDueToWebsocketConnectionLost = 1800204,
/// since:
/// 1.0.0
  SBCErrorCodeWrongResponse = 1800205,
/// since:
/// 1.0.0
  SBCErrorCodeQueryInProgress = 1800206,
/// since:
/// 1.0.0
  SBCErrorCodeInternalServerError = 1800207,
/// since:
/// 1.0.0
  SBCErrorCodeMalformedData = 1800208,
/// since:
/// 1.0.0
  SBCErrorCodeInvalidParameterValue = 1800300,
/// since:
/// 1.0.0
  SBCErrorCodeInvalidParameterType = 1800301,
/// since:
/// 1.0.0
  SBCErrorCodeInstanceNotInitialized = 1800302,
/// since:
/// 1.0.0
  SBCErrorCodeNotAuthenticated = 1800303,
/// since:
/// 1.0.0
  SBCErrorCodeChangingVideoDeviceNotSupported = 1800403,
/// since:
/// 1.0.0
  SBCErrorCodeChangingVideoDeviceInProgress = 1800404,
/// since:
/// 1.0.0
  SBCErrorCodeChangingVideoDeviceFailed = 1800405,
/// since:
/// 1.3.0
  SBCErrorCodeCaptureNotAllowedOnAudioCall = 1800600,
/// since:
/// 1.3.0
  SBCErrorCodeVideoViewNotReady = 1800601,
/// since:
/// 1.3.0
  SBCErrorCodeVideoCallNotConnectedYet = 1800602,
/// since:
/// 1.3.0
  SBCErrorCodeFailedToGetImageFromVideoStream = 1800603,
/// since:
/// 1.3.0
  SBCErrorCodeCallNotConnectedYet = 1800610,
/// since:
/// 1.3.0
  SBCErrorCodeWrongRecordingTypeForAudioCall = 1800611,
/// since:
/// 1.3.0
  SBCErrorCodeRecordingAlreadyInProgress = 1800612,
/// since:
/// 1.3.0
  SBCErrorCodeFailedToStartRecording = 1800614,
/// since:
/// 1.3.0
  SBCErrorCodeFailedToStopRecording = 1800615,
/// since:
/// 1.5.4
  SBCErrorCodeScreenShareRestrictedFromAudioCall = 1800620,
/// since:
/// 1.5.4
  SBCErrorCodeScreenShareRequestBeforeCallIsConnected = 1800621,
/// since:
/// 1.5.4
  SBCErrorCodeScreenShareAlreadyInProgress = 1800622,
/// since:
/// 1.5.4
  SBCErrorCodeNoScreenShareExists = 1800623,
/// since:
/// 1.8.0
  SBCErrorCodeCallPutOnHold = 1800632,
/// since:
/// 1.6.0
  SBCErrorCodeClientAlreadyEntered = 1800700,
/// since:
/// 1.6.0
  SBCErrorCodeEnteringRoomStillInProgress = 1800701,
/// since:
/// 1.6.0
  SBCErrorCodeParticipantNotInRoom = 1800702,
/// since:
/// 1.6.0
  SBCErrorCodeLocalParticipantLostConnection = 1800706,
/// since:
/// 1.10.3
  SBCErrorCodeLocalParticipantKickedOut = 1800707,
/// since:
/// 1.8.0
  SBCErrorCodeCallAlreadyOnHold = 1800801,
/// since:
/// 1.8.0
  SBCErrorCodeCallNotPutOnHoldByLocalUser = 1800802,
/// since:
/// 1.8.0
  SBCErrorCodeAnotherCallInProgress = 1800803,
/// since:
/// 1.6.0
  SBCErrorCodeInvalidParams = 400100,
/// since:
/// 1.6.0
  SBCErrorCodeMissingParams = 400111,
/// since:
/// 1.6.0
  SBCErrorCodeNotFound = 400200,
/// since:
/// 1.6.0
  SBCErrorCodeUniqueConstraint = 400201,
/// since:
/// 1.6.0
  SBCErrorCodeFreePlanEnded = 400800,
/// since:
/// 1.6.0
  SBCErrorCodeNotAllowed = 401120,
/// since:
/// 1.6.0
  SBCErrorCodeNotAuthorized = 401121,
/// since:
/// 1.0.6
  SBCErrorCodeServerInternalError = 1400999,
/// since:
/// 1.0.6
  SBCErrorCodeInvalidCallStatus = 1400101,
/// since:
/// 1.0.6
  SBCErrorCodeCallDoesNotExist = 1400102,
/// since:
/// 1.0.6
  SBCErrorCodeCalleeDoesNotExist = 1400103,
/// since:
/// 1.0.6
  SBCErrorCodeDialMyself = 1400104,
/// since:
/// 1.0.6
  SBCErrorCodeNoPermission = 1400105,
/// since:
/// 1.0.6
  SBCErrorCodeCalleeNeverAuthenticate = 1400106,
/// since:
/// 1.6.0
  SBCErrorCodeParticipantsLimitExceededInRoom = 1400120,
/// since:
/// 1.6.0
  SBCErrorCodeInvalidParticipantId = 1400121,
/// since:
/// 1.6.0
  SBCErrorCodeClientIdAlreadyExists = 1400122,
/// since:
/// 1.6.0
  SBCErrorCodeInvalidRequest = 1400123,
/// since:
/// 1.6.0
  SBCErrorCodeEndpointToSendStreamAlreadyExists = 1400124,
/// since:
/// 1.9.0
  SBCErrorCodeRoomDeleted = 1400126,
/// since:
/// 1.6.0
  SBCErrorCodeUnknownError = 500999,
};



/// since:
/// 1.0.0
SWIFT_PROTOCOL("_TtP13SendBirdCalls14SBCLogReceiver_")
@protocol SBCLogReceiver
/// Delegate method to be called when new log is generated. You have to implement this method to use the logs in your app.
/// \code
/// var logs: [String] = []
///
/// func log(message: String) {
///    self.logs.append(message)
///    self.updateLogsView()
/// }
///
/// func updateLogsView() {
///    // ...
/// }
///
/// \endcodesince:
/// 1.0.0
- (void)logMessage:(NSString * _Nonnull)message;
@end

enum SBCLoggerLevel : NSInteger;

/// since:
/// 1.0.0
SWIFT_CLASS("_TtC13SendBirdCalls9SBCLogger")
@interface SBCLogger : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Adds a custom log receiver to the SendBirdCall Logger.
/// \code
/// override func viewDidLoad() {
///    // ...
///    
///    SBCLogger.add(receiver: self)
/// }
///
/// \endcodesince:
/// 1.0.0
/// \param receiver The object implemented<code>SBCLogReceiver</code> to receive logs
///
+ (void)addLogReceiver:(id <SBCLogReceiver> _Nonnull)receiver;
/// Removes the custom log receiver from the SendBirdCall Logger.
/// \code
/// SBCLogger.remove(receiver: self)
///
/// \endcodesince:
/// 1.0.0
/// \param receiver The object inheritted<code>SBCLogReceiver</code>
///
+ (void)removeLogReceiver:(id <SBCLogReceiver> _Nonnull)receiver;
/// Update the logger level.
/// The log level decides what kind of logs are printed to the console and delivered to custom log receivers.
/// \code
/// SBCLogger.setLoggerLevel(.none)
///
/// \endcodesince:
/// 1.1.0
/// <ul>
///   <li>
///     See Also: <a href="x-source-tag://LoggerLevel">LoggerLevel</a>
///   </li>
/// </ul>
/// \param level The Logger Level value indicates the level to which it will be used.
///
+ (void)setLoggerLevel:(enum SBCLoggerLevel)level;
@end



@interface SBCLogger (SWIFT_EXTENSION(SendBirdCalls))
@end

/// Logger Level enumeration.
/// Log will not be exposed if the priority value is lower than the configured log level.
/// Logger Level follows the following priority:
/// <code>info < warning < error < none.</code>
/// <ul>
///   <li>
///     Cases:
///     <ul>
///       <li>
///         info: Informational messages that are general to the application.
///       </li>
///       <li>
///         warning: Potentially problematic situation that may indicate potential problems.
///       </li>
///       <li>
///         error: Error events that may represent the failure of normal program execution.
///       </li>
///       <li>
///         none: No logging.
///       </li>
///     </ul>
///   </li>
/// </ul>
typedef SWIFT_ENUM_NAMED(NSInteger, SBCLoggerLevel, "Level", open) {
/// Informational messages that are general to the application.
/// since:
/// 1.1.0
  SBCLoggerLevelInfo = 0,
/// Potentially problematic situation that may indicate potential problems.
/// since:
/// 1.1.0
  SBCLoggerLevelWarning = 1,
/// Error events that may represent the failure of normal program execution.
/// since:
/// 1.1.0
  SBCLoggerLevelError = 2,
/// No logging.
/// since:
/// 1.1.0
  SBCLoggerLevelNone = 3,
};

@class UIView;
@protocol SBCSendBirdCallDelegate;
@protocol SBCSendBirdRecordingDelegate;
@class PKPushRegistry;
@class PKPushPayload;
@class NSData;
@class UIApplication;
@class NSBundle;
enum SBCSoundType : NSInteger;

/// SendBirdCall
SWIFT_CLASS_NAMED("SendBirdCall")
@interface SBCSendBirdCall : NSObject
/// The app id of your SendBirdCalls application. Configure the app id using <a href="x-source-tag://configure(appId)">configure(appId:)</a>. This is get-only property.
/// important:
/// If you change the app ID, a previous configured app ID will be removed and all calls will be canceled.
/// \code
/// SendBirdCall.appId    // "Optional(YOUR_APP_ID)"
///
/// \endcodesince:
/// 1.0.0
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nullable appId;)
+ (NSString * _Nullable)appId SWIFT_WARN_UNUSED_RESULT;
/// Initiate <code>SendBirdCall</code> instance when a client app is launched. If another initialization with another <code>APP_ID</code> takes place, all existing data will be deleted and the <code>SendBirdCall</code> instance will be initialized with the new <code>APP_ID</code>.
/// \code
/// SendBirdCall.configure(appId: "YOUR_APP_ID")
///
/// \endcodesince:
/// 1.0.0
/// \param appId Your own app ID from your dashboard
///
///
/// returns:
/// (Discardable)<code>Bool</code> value. If the paramter has an empty string or equal previous app ID, it returns <code>false</code>.
/// If the method configures app ID successfully, it returns <code>true</code>.
+ (BOOL)configureWithAppId:(NSString * _Nonnull)appId;
/// SendBirdCalls SDK Version
/// \code
/// self.versionLabel.text = "SendBirdCalls v\(SendBirdCall.sdkVersion)"
///
/// // "SendBirdCalls v1.0.0"
///
/// \endcodesince:
/// 1.0.0
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull sdkVersion;)
+ (NSString * _Nonnull)sdkVersion SWIFT_WARN_UNUSED_RESULT;
/// Provides a view that allows user to change the system audio route. Returns <a href="https://developer.apple.com/documentation/avkit/avroutepickerview">AVRoutePickerView</a> in iOS 11 or later and <a href="https://developer.apple.com/documentation/mediaplayer/mpvolumeview">MPVolumeView</a> in earlier iOS version.
/// \code
/// let routePickerView = SendBirdCall.routePickerView(frame: frame)
/// self.parentView.addSubView(routePickerView)
///
/// \endcode<ul>
///   <li>
///     Customization
///   </li>
/// </ul>
/// \code
/// if #available(iOS 11.0, *) {
///    guard let routePickerView = routePickerView as? AVRoutePickerView else { return }
///    // Set up AVRoutePickerView
/// } else {
///    guard let routePickerView = routePickerView as? MPVolumeView else { return }
///    // Set up MPVolumeView
/// }
///
///
///
/// \endcodesince:
/// 1.0.0
/// <ul>
///   <li>
///     See Also:
///     <ul>
///       <li>
///         <a href="https://developer.apple.com/documentation/mediaplayer/mpvolumeview">MPVolumeView</a>
///       </li>
///       <li>
///         <a href="https://developer.apple.com/documentation/avkit/avroutepickerview">AVRoutePickerView</a>
///       </li>
///     </ul>
///   </li>
/// </ul>
/// \param frame <code>CGRect</code> value that is assigned to view’s frame.
///
///
/// returns:
///
/// <a href="https://developer.apple.com/documentation/avkit/avroutepickerview">AVRoutePickerView</a> in iOS 11.0 or later. (<a href="https://developer.apple.com/documentation/mediaplayer/mpvolumeview">MPVolumeView</a>  in previous iOS version)
+ (UIView * _Nonnull)routePickerViewWithFrame:(CGRect)frame SWIFT_WARN_UNUSED_RESULT;
/// Specifies the queue that you want to use for callbacks and delegate methods
/// since:
/// 1.0.0
/// \param queue DispatchQueue that will be used when callbacks and delegates are called.
///
+ (void)executeOnQueue:(dispatch_queue_t _Nonnull)queue;
/// Sets the app group.
/// since:
/// 1.10.10
/// \param appGroup The app group.
///
+ (void)setAppGroup:(NSString * _Nonnull)appGroup;
/// Registers a device-specific <code>SendBirdCallDelegate </code>event handler. Responding to device-wide events (e.g. incoming calls) is then managed as shown below:
/// \code
/// SendBirdCall.addDelegate(self, identifier: UNIQUE_HANDLER_ID)
///
/// func didStartRinging(_ call: DirectCall) {
///     call.delegate = self
/// }
///
/// \endcodesince:
/// 1.0.0
/// \param delegate SendBirdCallDelegate that listens to SendBirdCall events
///
/// \param identifier Identifier for the specific delegate
///
+ (void)addDelegate:(id <SBCSendBirdCallDelegate> _Nonnull)delegate identifier:(NSString * _Nonnull)identifier;
/// Removes delegate for the given identifier.
/// since:
/// 1.0.0
/// \param identifier String identifier for the delegate. If SendBirdCall doesn’t have the given identifier, it will be ignored.
///
+ (void)removeDelegateWithIdentifier:(NSString * _Nonnull)identifier;
/// Removes all delegate for SendBirdCall events.
/// since:
/// 1.0.0
+ (void)removeAllDelegates;
/// Adds a <code>SendBirdRecordingDelegate</code> to the SDK which is invoked when a recording session is finished successfully.
/// \code
/// SendBirdCall.addRecordingDelegate(self, identifier: UNIQUE_HANDLER_ID)
///
/// func didSaveRecording(call: DirectCall, recordingId: String, options: RecordingOptions, outputURL: URL) {
///    // Handle successful recording
/// }
///
/// func didFailToSaveRecording(call: DirectCall, recordingId: String, error: SBCError) {
///    // Handle failed recording
/// }
///
/// \endcodesince:
/// 1.3.0
/// \param delegate A <code>RecordingDelegate</code> to add to the SDK.
///
/// \param identifier A unique identifier for the <code>RecordingDelegate</code>.
///
+ (void)addRecordingDelegate:(id <SBCSendBirdRecordingDelegate> _Nonnull)delegate identifier:(NSString * _Nonnull)identifier;
/// Removes a <code>SendBirdRecordingDelegate</code> that has the specified identifier from the SDK.
/// since:
/// 1.3.0
/// \param identifier A unique identifier of a <code>RecordingDelegate</code> to remove from the SDK.
///
+ (void)removeRecordingDelegateWithIdentifier:(NSString * _Nonnull)identifier;
/// Removes all <code>SendBirdRecordingDelegates</code> from the SDK.
/// since:
/// 1.3.0
+ (void)removeAllRecordingDelegates;
/// Returns call for call ID.
/// since:
/// 1.0.0
/// \param callId Call ID.
///
///
/// returns:
///
/// <code>DirectCall</code> object with corresponding call ID. It can be <code>nil</code>.
+ (SBCDirectCall * _Nullable)callForCallId:(NSString * _Nonnull)callId SWIFT_WARN_UNUSED_RESULT;
/// Returns call for a given UUID.
/// since:
/// 1.0.0
/// \param callUUID Call UUID.
///
///
/// returns:
///
/// <code>DirectCall</code> object with corresponding call ID. It can be <code>nil</code>.
+ (SBCDirectCall * _Nullable)callForUUID:(NSUUID * _Nonnull)callUUID SWIFT_WARN_UNUSED_RESULT;
/// Returns number of ongoing calls.
/// since:
/// 1.2.0
+ (NSInteger)getOngoingCallCount SWIFT_WARN_UNUSED_RESULT;
/// Returns all ongoing calls, including the active call and all calls on hold.
/// since:
/// 1.8.0
+ (NSArray<SBCDirectCall *> * _Nonnull)getOngoingCalls SWIFT_WARN_UNUSED_RESULT;
/// Returns all incoming calls by the current user.
/// since:
/// 1.10.9
+ (NSArray<SBCDirectCall *> * _Nonnull)getIncomingCalls SWIFT_WARN_UNUSED_RESULT;
/// Returns the currently authenticated user.
/// since:
/// 1.0.0
///
/// returns:
///
/// User that is currently authenticated. Returns nil if no user exists.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBCUser * _Nullable currentUser;)
+ (SBCUser * _Nullable)currentUser SWIFT_WARN_UNUSED_RESULT;
/// Authenticates user with user ID and access token that you generated at SendBird Dashboard.  In order to make and receive calls, authenticate the user with SendBird server with the the <code>SendBirdCall.authenticate() </code>method.
/// \code
/// let params = AuthenticateParams(userId: userId, accessToken: accessToken)
///
/// SendBirdCall.authenticate(with: params) { user, error in
///     guard let user = user, error == nil else {
///         return
///     }
/// }
///
/// \endcodesince:
/// 1.0.0
/// \param params <code>AuthenticateParams</code> that contains User Id, Access Token, Push Token, and Unique
///
/// \param completionHandler The handler to call when the authenication is complete.
///
+ (void)authenticateWithParams:(SBCAuthenticateParams * _Nonnull)params completionHandler:(void (^ _Nonnull)(SBCUser * _Nullable, SBCError * _Nullable))completionHandler;
/// Deauthenticates user. To stop receiving calls after deauthentication, you should unregister according push tokens by calling <code>unregisterVoIPPush</code> and <code>unregisterRemotePush</code> before deauthenticating.
/// \code
/// SendBirdCall.unregisterVoIPPush(token: myVoIPPushToken) { error in // Unregister push tokens to stop receiving push notifications on deauhtenticated devices. Unregistering push tokens must be done before deauthenticating.
///    // Handle unregister push token
///
///    SendBirdCall.deauthenticate { error in
///        guard error == nil else {
///            // handle error
///            return
///        }
///    )
/// }
///
/// \endcodesince:
/// 1.1.0
/// \param completionHandler Error Handler to be called after deauthenticate process is finished
///
+ (void)deauthenticateWithCompletionHandler:(void (^ _Nullable)(SBCError * _Nullable))completionHandler;
/// Makes a call to user(callee) directly. (1:1 Call).  Use the <code>CallOptions</code> object to choose initial call configuration (e.g. muted/unmuted)
/// \code
/// let params = DialParams(calleeId: CALLEE_ID, callOptions: CallOptions())
///
/// let directCall = SendBirdCall.dial(with: params) { directCall, error in
///     //
/// }
///
/// directCall.delegate = self
///
/// \endcodesince:
/// 1.0.0
/// \param params <code>DialParams</code> that contains calleeId, videoCall flag, CallOptions, and customItems.
///
/// \param completionHandler Callback completionHandler to be called after dialing.
///
///
/// returns:
/// (Discardable) <code>DirectCall</code> object. If the method failed to make a call, it would return <code>nil</code>.
+ (SBCDirectCall * _Nullable)dialWithParams:(SBCDialParams * _Nonnull)params completionHandler:(void (^ _Nonnull)(SBCDirectCall * _Nullable, SBCError * _Nullable))completionHandler;
/// Sets timeout value for the timeout period before unanswered ringing or dialing calls expires and ends. Its default value is 60 seconds.
/// important:
/// If you assign invalid value(0 or negative value), it will be ignored
/// \code
/// SendBirdCall.setRingingTimeout(30)
///
/// \endcodesince:
/// 1.0.5
/// \param timeout Timeout value in seconds.
///
+ (void)setRingingTimeout:(NSInteger)timeout;
/// Sets timeout value for the timeout period before the call is connected. Default value is 60 seconds.
/// important:
/// If you assign invalid value(0 or negative value), it will be ignored.
/// \code
/// SendBirdCall.setCallConnectingTimeout(30)
///
/// \endcodesince:
/// 1.2.0
/// \param timeout Timeout value in seconds.
///
+ (void)setCallConnectingTimeout:(NSInteger)timeout;
/// Handles incoming VoIP push with SendBirdCalls payload. Incoming calls are received either via the application’s persistent internal server connection, or (if the application is in the background) via PushKit. PushKit messages received by the SendBirdCall instance <em>MUST</em> be delivered to the SDK.
/// \code
/// class MyClass: PKPushRegistryDelegate {
///     func pushRegistry(_ registry: PKPushRegistry, didReceiveIncomingPushWith payload: PKPushPayload, for type: PKPushType, completion: @escaping () -> Void) {
///         SendBirdCall.pushRegistry(registry, didReceiveIncomingPushWith: payload, for: type) { uuid in
///       
///             // IMPORTANT: You MUST report incoming call to CallKit when you receive a pushkit push.
///             let provider = CXProvider(configuration: CXProviderConfiguration)
///             let update = CXCallUpdate()
///             update.remoteHandle = CXHandle(type: .generic, value: HANDLE_VALUE)
///             provider.reportNewIncomingCall(with: uuid, update: update) { error in
///                 completion()
///             })
///         }
///     }
/// }
///
/// \endcodesince:
/// 1.0.0
/// \param registry <code>PKPushRegistry</code> object same as  <code>PKPushRegistryDelegate</code> registry.
///
/// \param payload <code>PKPushPayload</code> in incoming VoIP push notification.
///
/// \param type <code>PKPushType</code> of push(<code>VoIP</code>)
///
/// \param completionHandler This closure is invoked with <code>UUID</code> from the payload.
///
+ (void)pushRegistry:(PKPushRegistry * _Nonnull)registry didReceiveIncomingPushWith:(PKPushPayload * _Nonnull)payload for:(PKPushType _Nonnull)type completionHandler:(void (^ _Nullable)(NSUUID * _Nullable))completionHandler;
/// To receive native-like calls while an app is in the background or closed, a device registration token must be registered to the server. Register a device push token during authentication by either providing it as a parameter in the <code>SendBirdCall.authenticate()</code> method, or after authentication has completed using the <code>SendBirdCall.registerVoIPPushToken()</code> method.
/// \code
/// // PKPushRegistryDelegate
/// class AppDelegate: PKPushRegistryDelegate {
///    func voipRegistration() {
///        self.voipRegistry = PKPushRegistry(queue: DispatchQueue.main)
///        self.voipRegistry?.delegate = self
///        self.voipRegistry?.desiredPushTypes = [.voIP]
///    }
///
///    ...
///    func pushRegistry(_ registry: PKPushRegistry, didUpdate pushCredentials: PKPushCredentials, for type: PKPushType) {
///        SendBirdCall.registerVoIPPush(token: pushCredentials.token) { (error) in
///            guard let error = error else {
///                return
///            }
///            // The Push Token has been registered successfully
///        }
///    }
///    ...
/// }
///
/// \endcodesince:
/// 1.0.0
/// \param token <code>Data</code> object from <code>pushCredential.token</code>.  Refer to <code>PKPushRegistryDelegate</code>
///
/// \param unique If it is false, you can register more token for multi devices. It has <code>false</code> as a default value.
///
+ (void)registerVoIPPushWithToken:(NSData * _Nullable)token unique:(BOOL)unique completionHandler:(void (^ _Nullable)(SBCError * _Nullable))completionHandler;
/// Unregisters a VoIP push token of specific device. You will not receive VoIP push notification for a call anymore.   If you don’t want to receive a call in all of the devices of the users, call <code>unregisterAllVoIPPushTokens(completionHandler:)</code>.
/// \code
/// func removeVoIPPushToken() {
///     SendBirdCall.unregisterVoIPPush(token: myVoIPPushToken) { error in
///     guard error == nil else { return }
///     // Unregistered successfully
/// }
///
/// \endcodesince:
/// 1.0.0
/// \param token Optional Data for the push token that you want to unregister
///
/// \param completionHandler ErrorHandler that returns callback with error.
///
+ (void)unregisterVoIPPushWithToken:(NSData * _Nullable)token completionHandler:(void (^ _Nullable)(SBCError * _Nullable))completionHandler;
/// Unregister all VoIP push token registered to the current user(multi device).  You will not receive a call in all of the devices of the users.
/// \code
/// func removeAllOfVoIPPushTokens() {
///     func unregisterAllVoIPPushTokens(completionHandler: ErrorHandler?) {
///         guard error == nil else { return }
///         // Unregistered all push tokens successfully
///     }
/// }
///
/// \endcodesince:
/// 1.0.0
/// \param completionHandler ErrorHandler that returns callback with error
///
+ (void)unregisterAllVoIPPushTokensWithCompletionHandler:(void (^ _Nullable)(SBCError * _Nullable))completionHandler;
/// To receive remote notifications when the app is in the background or closed, you <em>must</em> deliver the received remote notification to SendBirdCalls SDK.
/// note:
/// SendBirdCall will only process SendBird’s notifications. If the userInfo does not contain SendBirdCall’s payload, method will be returned without processing the payload so that you can control the push notifications at your will.
/// \code
/// class AppDelegate {
///     func application(_ application: UIApplication, didReceiveRemoteNotification userInfo: [AnyHashable : Any], fetchCompletionHandler completionHandler: @escaping (UIBackgroundFetchResult) -> Void) {
///         SendBirdCall.application(application, didReceiveRemoteNotification: userInfo)
///     }
/// }
///
/// \endcodesince:
/// 1.0.3
/// \param application Your singleton app object.
///
/// \param userInfo A dictionary that contains information about incoming SendBird Calls.
///
+ (void)application:(UIApplication * _Nonnull)application didReceiveRemoteNotification:(NSDictionary * _Nonnull)userInfo;
/// Mark push notification as delivered for push delivery tracking purpose only.
/// It is only work for <code>Notification Service Extension</code>.
/// This does not mark the message as delivered.
/// since:
/// 1.10.12
/// \param remoteNotificationPayload The remote notification payload
///
/// \param completionHandler The handler block to execute
///
+ (void)markPushNotificationAsDeliveredWithRemoteNotificationPayload:(NSDictionary * _Nonnull)remoteNotificationPayload completionHandler:(void (^ _Nullable)(SBCError * _Nullable))completionHandler;
/// To receive remote notifications while an app is in the background or closed, a device registration token must be registered to the server. Register a remote push token during by using the <code>SendBirdCall.registerRemotePushToken()</code> method.
/// \code
/// func application(_ application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data) {
///   SendBirdCall.registerRemotePush(token: deviceToken) { error in
///       //
///   }
/// }
///
/// \endcodenote:
/// You must register the device to receive remote notifications via Apple Push Notification service for <code>application(_:didRegisterForRemoteNotificationsWithDeviceToken:)</code> to be called. Refer to <code>UIApplication.registerForRemoteNotifications()</code>.
/// since:
/// 1.0.3
/// \param token Unique Token that identifies the device to APNs. Provide the token to register to SendBird.
///
/// \param unique If it is false, you can register more token for multi devices. It has <code>false</code> as a default value.
///
+ (void)registerRemotePushWithToken:(NSData * _Nullable)token unique:(BOOL)unique completionHandler:(void (^ _Nullable)(SBCError * _Nullable))completionHandler;
/// Unregisters a remote push token of specific device. You will not receive remote push notification on the device anymore. If you don’t want to receive remote notifications in all of the devices of the users, call <code>unregisterAllRemotePushTokens(completionHandler:)</code>.
/// <ul>
///   <li>
///     parameters:
///   </li>
///   <li>
///     token: Optional Data for the push token that you want to unregister
///   </li>
///   <li>
///     completionHandler: ErrorHandler that returns callback with error.
///   </li>
/// </ul>
/// \code
/// func removeRemotePushToken() {
///    SendBirdCall.unregisterRemotePush(token: myRemotePushToken) { error in
///        guard error == nil else { return }
///        // Unregistered successfully
///    }
/// }
///
/// \endcodesince:
/// 1.0.3
+ (void)unregisterRemotePushWithToken:(NSData * _Nullable)token completionHandler:(void (^ _Nullable)(SBCError * _Nullable))completionHandler;
/// Unregister all remote push token registered to the current user(multi device).  You will not receive remote notifications in all of the devices of the users.
/// \code
/// func removeAllOfRemotePushTokens() {
///     func unregisterAllRemotePushTokens(completionHandler: ErrorHandler?) {
///         guard error == nil else { return }
///         // Unregistered all remote push tokens successfully
///     }
/// }
///
/// \endcodesince:
/// 1.0.3
/// \param completionHandler ErrorHandler that returns callback with error
///
+ (void)unregisterAllRemotePushTokensWithCompletionHandler:(void (^ _Nullable)(SBCError * _Nullable))completionHandler;
/// Creates a Direct Call Log List Query from given params.
/// since:
/// 1.0.0
/// \param params DirectCallLogListQuery Params with options for creating query.
///
///
/// returns:
///
/// DirectCallLogListQuery: Returns optional query object. Returns nil if current user does not exit.
+ (SBCDirectCallLogListQuery * _Nullable)createDirectCallLogListQueryWithParams:(SBCDirectCallLogListQueryParams * _Nonnull)params SWIFT_WARN_UNUSED_RESULT;
/// Creates a query for room list with specified parameters.
/// since:
/// 1.7.0
/// \param params RoomListQuery Params with options for creating query.
///
+ (SBCRoomListQuery * _Nullable)createRoomListQueryWith:(SBCRoomListQueryParams * _Nonnull)params SWIFT_WARN_UNUSED_RESULT;
/// Updates custom items for a given call Id.
/// since:
/// 1.0.0
/// \param callId Call ID.
///
/// \param customItems Custom items of [String: String] to be updated or inserted.
///
/// \param completionHandler Callback completionHandler. Contains custom items, changes custom items, and error.
///
+ (void)updateCustomItemsWithCallId:(NSString * _Nonnull)callId customItems:(NSDictionary<NSString *, NSString *> * _Nonnull)customItems completionHandler:(void (^ _Nonnull)(NSDictionary<NSString *, NSString *> * _Nullable, NSArray<NSString *> * _Nullable, SBCError * _Nullable))completionHandler;
/// Deletes custom items for a given call Id.
/// since:
/// 1.0.0
/// \param callId Call ID.
///
/// \param customItemKeys Keys of custom items that you want to delete.
///
/// \param completionHandler Callback completionHandler. Contains custom items, changes custom items, and error.
///
+ (void)deleteCustomItemsWithCallId:(NSString * _Nonnull)callId customItemKeys:(NSArray<NSString *> * _Nonnull)customItemKeys completionHandler:(void (^ _Nonnull)(NSDictionary<NSString *, NSString *> * _Nullable, NSArray<NSString *> * _Nullable, SBCError * _Nullable))completionHandler;
/// Deletes all custom items for a given call Id.
/// since:
/// 1.0.0
/// \param callId Call ID.
///
/// \param completionHandler Callback completionHandler. Contains custom items, changes custom items, and error.
///
+ (void)deleteAllCustomItemsWithCallId:(NSString * _Nonnull)callId completionHandler:(void (^ _Nonnull)(NSDictionary<NSString *, NSString *> * _Nullable, NSArray<NSString *> * _Nullable, SBCError * _Nullable))completionHandler;
/// Called when the audio session is activated outside of the app by iOS.
/// \code
/// class AppDelegate: CXProviderDelegate {
///     func provider(_ provider: CXProvider, didActivate audioSession: AVAudioSession) {
///         SendBirdCall.audioSessionDidActivate(audioSession)
///     }
/// }
///
/// // MARK: - Audio Session
///
///
/// \endcodesince:
/// 1.0.2
+ (void)audioSessionDidActivate:(AVAudioSession * _Nonnull)audioSession;
/// Called when the audio session is deactivated outside of the app by iOS.
/// \code
/// class AppDelegate: CXProviderDelegate {
///     func provider(_ provider: CXProvider, didDeactivate audioSession: AVAudioSession) {
///         SendBirdCall.audioSessionDidDeactivate(audioSession)
///     }
/// }
///
/// \endcodesince:
/// 1.0.2
+ (void)audioSessionDidDeactivate:(AVAudioSession * _Nonnull)audioSession;
/// Adds sound used in <code>DirectCall</code>  such as ringtone and some sound effects with its file name and bundle.
/// \code
/// SendBirdCall.addDirectCallSound("dialing.mp3", forType: .dialing)
///
/// \endcodesince:
/// 1.3.0
/// \param name The name of your audio file. Please explicit its extension: “dialing.mp3”
///
/// \param bundle The bundle object. The default is main bundle.
///
/// \param type The type of sound.
///
+ (void)addDirectCallSound:(NSString * _Nonnull)name bundle:(NSBundle * _Nonnull)bundle forType:(enum SBCSoundType)type;
/// Enables / disables dial sound used in <code>DirectCall</code> even when the device is in silent mode. Call this method right after <code>addDirectCallSound(_:forType:)</code>.
/// \code
/// SendBirdCall.addDirectCallSound("dialing.mp3", forType: .dialing)
/// SendBirdCall.setDirectCallDialingSoundOnWhenSilentMode(isEnabled: true) // Will play dial direct call sounds in silent mode
///
/// \endcodesince:
/// 1.5.0
/// \param isEnabled If it is <code>true</code>, dial sound used in <code>DirectCall</code> will be played in silent mode.
///
+ (void)setDirectCallDialingSoundOnWhenSilentMode:(BOOL)isEnabled;
/// Adds sound used in <code>DirectCall</code>  such as ringtone and some sound effects with URL. If you use bundle to play sound, <code>addDirectCallSound(_:bundle:forType:)</code> is recommended.
/// \code
/// SendBirdCall.addDirectCallSound("dialing.mp3", forType: .dialing)
///
/// \endcodesince:
/// 1.3.0
/// \param url The URL of your audio file.
///
/// \param type The key respresenting the type of sound.
///
+ (void)addDirectCallSound:(NSURL * _Nonnull)url forType:(enum SBCSoundType)type;
/// Removes sound used in <code>DirectCall</code> with <code>SoundType</code> value.
/// \code
/// SendBirdCall.removeDirectCallSound(forType: .dialing)
///
/// \endcodesince:
/// 1.3.0
/// \param type The type of sound you want to remove.
///
+ (void)removeDirectCallSoundForType:(enum SBCSoundType)type;
/// Actively retrieve incoming direct calls that were not received via push notifications.
/// If incoming calls exist when this method is called, <code>SendBirdCallDelegate.didStartRinging</code> will be called.
/// since:
/// 1.10.7
+ (void)retrieveMissedDirectCallsWithCompletionHandler:(void (^ _Nullable)(SBCError * _Nullable))completionHandler;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE;
@end


@interface SBCSendBirdCall (SWIFT_EXTENSION(SendBirdCalls))
/// Creates a room for group calls.
/// \code
/// SendBirdCall.createRoom { room, error in
///    ...
///    // Set up delegate to receive events
/// }
///
/// \endcodesince:
/// 1.6.0
/// \param completionHandler A callback function that receives information about a room or an error from Sendbird server.
///
+ (void)createRoomWithParams:(SBCRoomParams * _Nonnull)params completionHandler:(void (^ _Nonnull)(SBCRoom * _Nullable, SBCError * _Nullable))completionHandler;
/// Gets a locally-cached room instance by room ID.
/// since:
/// 1.6.0
/// \param roomId room ID.
///
///
/// returns:
/// <code>Room</code> object with the corresponding roomId
+ (SBCRoom * _Nullable)cachedRoomByRoomId:(NSString * _Nonnull)roomId SWIFT_WARN_UNUSED_RESULT;
/// Fetches a room instance from Sendbird server.
/// since:
/// 1.6.0
/// \param roomId room ID.
///
/// \param completionHandler Callback to be called after get <code>Room</code> object corresponding the ID or an error
///
+ (void)fetchRoomByRoomId:(NSString * _Nonnull)roomId completionHandler:(void (^ _Nonnull)(SBCRoom * _Nullable, SBCError * _Nullable))completionHandler;
@end


/// Device-wide delegate for SendBirdCall.
/// since:
/// 1.0.0
SWIFT_PROTOCOL_NAMED("SendBirdCallDelegate")
@protocol SBCSendBirdCallDelegate
@optional
/// Called when incoming calls are received.
/// \code
/// class MyClass: SendBirdCallDelegate {
///     func didStartRinging(_ call: DirectCall) {
///         call.delegate = self
///     }
/// }
///
/// \endcodesince:
/// 1.0.0
/// \param call <code>DirectCall</code> object.
///
- (void)didStartRinging:(SBCDirectCall * _Nonnull)call;
/// Called when a VoIP Push notification is received about incoming DirectCall, but that call has already been processed.
/// Inside this delegate method, you should show an incoming CallKit call but dismiss it since it’s invalid.
/// since:
/// 1.10.7
- (void)didReceiveVoIPException:(SBCDirectCall * _Nonnull)ongoingCall;
/// Called when the specified user receives the invitation to enter the room.
/// \code
/// class MyClass: SendBirdCallDelegate {
///     func didReceiveInvitation(_ invitation: RoomInvitation) {
///        // Accept invitation
///        invitation.accept { error in }
///
///        // Decline invitation
///        invitation.decline { error in }
///     }
/// }
///
/// \endcodesince:
/// 1.10.0
/// \param invitation <code>RoomInvitation</code> object.
///
- (void)didReceiveInvitation:(RoomInvitation * _Nonnull)invitation;
@end


SWIFT_CLASS_NAMED("SendBirdChatOptions")
@interface SBCChatOptions : NSObject
@property (nonatomic, copy) NSString * _Nonnull channelURL;
- (nonnull instancetype)initWithChannelURL:(NSString * _Nonnull)channelURL OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// A Int64 Range with half-open interval from a lower bound up to, but not including, an upper bound. Default value is <code>Int64.min..<Int64.max</code>.
/// since:
/// 1.7.0
SWIFT_CLASS_NAMED("SendBirdRange")
@interface SBCRange : NSObject
/// Determines the value for lower bound.
/// since:
/// 1.7.0
@property (nonatomic) int64_t lowerBound;
/// Determines the value for upper bound.
/// since:
/// 1.7.0
@property (nonatomic) int64_t upperBound;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init:(NSRange)range OBJC_DESIGNATED_INITIALIZER;
@end


/// Device-wide recordingDelegate for SendBirdCall.
/// since:
/// 1.3.0
SWIFT_PROTOCOL_NAMED("SendBirdRecordingDelegate")
@protocol SBCSendBirdRecordingDelegate
/// Notifies that a recording session has been saved successfully. This receives information about the recording through the following parameters.
/// \code
/// class MyClass: SendBirdRecordingDelegate {
///    func didSaveRecording(call: DirectCall, recordingId: String, options: RecordingOptions, outputURL: URL) {
///         // Handle successful recording
///     }
/// }
///
/// \endcodesince:
/// 1.3.0
/// \param call A recorded direct call.
///
/// \param recordingId A unique identifier of the recording session created in <code>startRecording</code>.
///
/// \param options An option that is used when starting a recording session.
///
/// \param outputURL A URL which the recorded file is saved.
///
- (void)didSaveRecordingWithCall:(SBCDirectCall * _Nonnull)call recordingId:(NSString * _Nonnull)recordingId options:(SBCRecordingOptions * _Nonnull)options outputURL:(NSURL * _Nonnull)outputURL;
/// Notifies that a recording session has not been saved. This receives information about the recording through the following parameters.
/// \code
/// class MyClass: SendBirdRecordingDelegate {
///    func didFailToSaveRecording(call: DirectCall, recordingId: String, error: SBCError) {
///        // Handle failed recording.
///    }
/// }
///
/// \endcode\param call A recorded direct call.
///
/// \param recordingId A unique identifier of the recording session created in <code>startRecording</code>.
///
/// \param error An error that occurred while saving a recording.
///
- (void)didFailToSaveRecordingWithCall:(SBCDirectCall * _Nonnull)call recordingId:(NSString * _Nonnull)recordingId error:(SBCError * _Nonnull)error;
@end


/// Video renderring view. Add to your <code>UIView</code> to show video.
/// \code
/// @IBOutlet weak var localVideoView: UIView?
/// @IBOutlet weak var remoteVideoView: UIView?
///
/// ...
///
/// let localSBView = SendBirdVideoView(frame: self.localVideoView?.frame ?? CGRect.zero)
/// let remoteSBView = SendBirdVideoView(frame: self.remoteVideoView?.frame ?? CGRect.zero)
///
/// self.call.updateLocalVideoView(localSBView)
/// self.call.updateRemoteVideoView(remoteSBView)
///
/// // When you make a call or accept an incoming call.
/// let callOptions = CallOptions(
///                   isAudioEnabled = true,
///                   isVideoEnabled = true,
///                   localVideoView: localSBVideoView
///                   remoteVideoView: remoteSBVideoView)
///
/// // Or when update local / remote view
/// self.call.updateLocalVideoView(localSBView)
/// self.call.updateRemoteVideoView(remoteSBView)
///
///
/// \endcodesince:
/// 1.0.0
SWIFT_CLASS_NAMED("SendBirdVideoView")
@interface SBCVideoView : RTCMTLVideoView
/// Initializes SendBirdVideoView with a custom contentMode.
/// note:
/// Custom UIView.ContentMode on non-arm64 devices is not supported.
/// since:
/// 1.6.0
- (nonnull instancetype)initWithFrame:(CGRect)frame contentMode:(UIViewContentMode)contentMode OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// UIView.ContentMode of video. Default value is scaleAspectFill
/// note:
/// Custom UIView.ContentMode on non-arm64 devices is not supported.
/// since:
/// 1.6.0
@property (nonatomic) UIViewContentMode videoContentMode;
/// Embeds the SendBirdVideoView into the provided UIView.
/// Layout Constraints are added to make the SendBirdVideoView fill the size of the provided UIVIew.
/// since:
/// 1.6.1
/// \param view UIView in which the SendBirdVideoView will be inserted to. Superview of this SendBirdVideoView.
///
- (void)embedInView:(UIView * _Nonnull)view;
@end

@class RTCVideoFrame;

@interface SBCVideoView (SWIFT_EXTENSION(SendBirdCalls))
- (void)renderFrame:(RTCVideoFrame * _Nullable)frame;
@end

/// The sound types.
/// since:
/// 1.3.0
typedef SWIFT_ENUM_NAMED(NSInteger, SBCSoundType, "SoundType", open) {
/// Refers to a sound that is played on a caller’s side when the caller makes a call to a callee.
/// since:
/// 1.3.0
  SBCSoundTypeDialing = 0,
/// Refers to a sound that is played on a callee’s side when receiving a call.
/// since:
/// 1.3.0
  SBCSoundTypeRinging = 1,
/// Refers to a sound that is played when a connection is lost, but immediately tries to reconnect. Users are also allowed to customize the ringtone.
/// since:
/// 1.3.0
  SBCSoundTypeReconnecting = 2,
/// Refers to a sound that is played when a connection is re-established.
/// since:
/// 1.3.0
  SBCSoundTypeReconnected = 3,
};



@interface SBCUser (SWIFT_EXTENSION(SendBirdCalls)) <NSCopying>
/// Returns a copied instance of the <code>User</code>.
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
@end


@interface SBCUser (SWIFT_EXTENSION(SendBirdCalls))
/// The hash value of <code>User</code>.
@property (nonatomic, readonly) NSUInteger hash;
/// Returns a Boolean value that indicates whether the <code>User</code> and a given object are equal.
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end

enum SBCVideoDevicePosition : NSInteger;

/// A device for capture video.
/// \code
/// func flipCamera(call: DirectCall) {
///
///    let current = call.currentVideoDevice
///    let devices = call.availableVideoDevices
///
///    guard let device = devices.first(where: { $0.position != current?.position }) else { return }
///    
///    call.selectVideoDevice(device) { error in
///        // do something when error has occurred.
///    }
/// }
///
/// \endcodesince:
/// 1.0.0
SWIFT_CLASS_NAMED("VideoDevice")
@interface SBCVideoDevice : NSObject
/// An ID unique to the model of device corresponding to the receiver.
/// since:
/// 1.0.0
@property (nonatomic, readonly, copy) NSString * _Nonnull uniqueId;
/// A localized human-readable name for the receiver.
/// since:
/// 1.0.0
@property (nonatomic, readonly, copy) NSString * _Nonnull localizedName;
/// Indicates the physical position of an VideoDevice’s hardware.
/// since:
/// 1.0.0
@property (nonatomic, readonly) enum SBCVideoDevicePosition position;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



@interface SBCVideoDevice (SWIFT_EXTENSION(SendBirdCalls))
@end

/// Constants indicating the physical position of an VideoDevice’s hardware.
/// since:
/// 1.0.0
typedef SWIFT_ENUM_NAMED(NSInteger, SBCVideoDevicePosition, "Position", open) {
/// The video device is on the front of the unit.
/// since:
/// 1.0.0
  SBCVideoDevicePositionFront = 0,
/// The video device is on the back of the unit.
/// since:
/// 1.0.0
  SBCVideoDevicePositionBack = 1,
/// The video device’s position relative to the system hardware is unspecified.
/// since:
/// 1.0.0
  SBCVideoDevicePositionUnspecified = 2,
};


#endif
#if defined(__cplusplus)
#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 5.7.1 (swiftlang-5.7.1.135.3 clang-1400.0.29.51)
#ifndef SENDBIRDCALLS_SWIFT_H
#define SENDBIRDCALLS_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wduplicate-method-match"
#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT noexcept
#endif
#else
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT 
#endif
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_CXX_INT_DEFINED)
#define SWIFT_CXX_INT_DEFINED
namespace swift {
using Int = ptrdiff_t;
using UInt = size_t;
}
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import AVFAudio;
@import CoreFoundation;
@import CoreMedia;
@import Dispatch;
@import Foundation;
@import ObjectiveC;
@import PushKit;
@import UIKit;
@import WebRTC;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="SendBirdCalls",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
@class SBCCallOptions;

/// Parameter for accepting incoming call from another user. Contains initial configurations for the call.
/// since:
/// 1.0.0
SWIFT_CLASS_NAMED("AcceptParams")
@interface SBCAcceptParams : NSObject
/// Options for the call.
/// since:
/// 1.0.0
@property (nonatomic, strong) SBCCallOptions * _Nonnull callOptions;
/// Holds the active call and accepts an incoming call.
/// since:
/// 1.8.0
@property (nonatomic) BOOL holdActiveCall;
/// since:
/// 1.8.0
/// \param callOptions Call Options for configuring the incoming call. Default value is <code>CallOptions()</code> with only audio call capability.
///
/// \param holdActiveCall Holds the active call and accepts an incoming call.
///
- (nonnull instancetype)initWithCallOptions:(SBCCallOptions * _Nonnull)callOptions holdActiveCall:(BOOL)holdActiveCall OBJC_DESIGNATED_INITIALIZER;
/// since:
/// 1.0.0
- (nonnull instancetype)initWithCallOptions:(SBCCallOptions * _Nonnull)callOptions;
/// since:
/// 1.0.0
/// \param callOptions Call Options for configuring the incoming call. Default value is <code>CallOptions()</code> with only audio call capability.
///
- (nonnull instancetype)init;
@end

@class NSString;

/// Configuration for authentication of SendBird user.
/// since:
/// 1.0.0
SWIFT_CLASS_NAMED("AuthenticateParams")
@interface SBCAuthenticateParams : NSObject
/// User Id of the user.
/// since:
/// 1.0.0
@property (nonatomic, copy) NSString * _Nonnull userId;
/// Access Token used for extra layer of security.
/// since:
/// 1.0.0
@property (nonatomic, copy) NSString * _Nullable accessToken;
/// since:
/// 1.0.0
/// \param userId User Id of the user.
///
/// \param accessToken Access Token used for extra layer of security.
///
- (nonnull instancetype)initWithUserId:(NSString * _Nonnull)userId accessToken:(NSString * _Nullable)accessToken OBJC_DESIGNATED_INITIALIZER;
/// since:
/// 1.2.0
/// \param userId User Id of the user.
///
- (nonnull instancetype)initWithUserId:(NSString * _Nonnull)userId;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE_MSG("Use `init(userId:)` instead.");
@end


@class SBCVideoView;

/// Options for configuring the call.
/// since:
/// 1.0.0
SWIFT_CLASS_NAMED("CallOptions")
@interface SBCCallOptions : NSObject
/// Shows local user’s screen.
/// since:
/// 1.0.0
@property (nonatomic, weak) SBCVideoView * _Nullable localVideoView;
/// Shows remote user’s screen.
/// since:
/// 1.0.0
@property (nonatomic, weak) SBCVideoView * _Nullable remoteVideoView;
/// <code>Bool</code> value indicates that whether to use the front camera when it start video call. device. The default value is <code>true</code>.
/// since:
/// 1.0.0
@property (nonatomic) BOOL useFrontCamera;
/// Bool value indicating whether the call will start with audio. If the value if <code>false</code>, the call will start without audio.
/// since:
/// 1.0.0
@property (nonatomic) BOOL isAudioEnabled;
/// Bool value indicating whether the call will start with video. If the value if <code>false</code>, the call will start without video.
/// since:
/// 1.0.0
@property (nonatomic) BOOL isVideoEnabled;
/// Sets up voice call options. <code>isVideoEnabled</code> has <code>false</code> as a value.
/// since:
/// 1.0.0
/// \param isAudioEnabled Bool value indicating whether the call starts with audio. The default value is <code>true</code>.
///
- (nonnull instancetype)initWithAudioEnabled:(BOOL)isAudioEnabled;
/// since:
/// 1.0.0
/// \param isAudioEnabled <code>Bool</code> object assigned <code>true</code> as a default value.
///
/// \param isVideoEnabled <code>Bool</code> object assigned <code>true</code> as a default value.
///
/// \param localVideoView <code>SendBirdVideoView</code> object to show local video. Default value is <code>nil</code>
///
/// \param remoteVideoView <code>SendBirdVideoView</code> object to show remote video. Default value is <code>nil</code>
///
- (nonnull instancetype)initWithAudioEnabled:(BOOL)isAudioEnabled videoEnabled:(BOOL)isVideoEnabled localVideoView:(SBCVideoView * _Nullable)localVideoView remoteVideoView:(SBCVideoView * _Nullable)remoteVideoView useFrontCamera:(BOOL)useFrontCamera OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init;
@end


@interface SBCCallOptions (SWIFT_EXTENSION(SendBirdCalls)) <NSCopying>
/// Returns a copied instance of the <code>CallOptions</code>.
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
@end

@class SBCChatOptions;

/// Parameter for dialing another user. Contains initial configurations for the call.
/// since:
/// 1.0.0
SWIFT_CLASS_NAMED("DialParams")
@interface SBCDialParams : NSObject
/// User Id of the callee to be called.
/// since:
/// 1.0.0
@property (nonatomic, copy) NSString * _Nonnull calleeId;
/// <code>Bool</code> value indicating whether the call supports vieo call. The default value is <code>false</code>.
/// since:
/// 1.0.0
@property (nonatomic) BOOL isVideoCall;
/// Options for the call.
/// since:
/// 1.0.0
@property (nonatomic, strong) SBCCallOptions * _Nonnull callOptions;
/// Custom items for the call.
/// since:
/// 1.0.0
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nonnull customItems;
@property (nonatomic, strong) SBCChatOptions * _Nullable sendbirdChatOptions;
/// Holds the active call and dials a new call.
/// since:
/// 1.8.0
@property (nonatomic) BOOL holdActiveCall;
/// since:
/// 1.8.0.
/// \param calleeId The callee’s user ID
///
/// \param isVideoCall <code>Bool</code> value indicating whether the call supports vieo call. The default value is <code>false</code>.
///
/// \param callOptions Call options for configuring the outgoing call. The default value is <code>CallOptions()</code> with only audio call capability.
///
/// \param customItems Custom items for the call. The default value is empty dictionary.
///
/// \param sendbirdChatOptions Options for configuring SendBird Chat.
///
/// \param holdActiveCall Holds the active call and dials a new call.
///
- (nonnull instancetype)initWithCalleeId:(NSString * _Nonnull)calleeId isVideoCall:(BOOL)isVideoCall callOptions:(SBCCallOptions * _Nonnull)callOptions customItems:(NSDictionary<NSString *, NSString *> * _Nonnull)customItems sendbirdChatOptions:(SBCChatOptions * _Nullable)sendbirdChatOptions holdActiveCall:(BOOL)holdActiveCall OBJC_DESIGNATED_INITIALIZER;
/// since:
/// 1.5.0
/// \param calleeId The callee’s user ID
///
/// \param isVideoCall <code>Bool</code> value indicating whether the call supports vieo call. The default value is <code>false</code>.
///
/// \param callOptions Call options for configuring the outgoing call. The default value is <code>CallOptions()</code> with only audio call capability.
///
/// \param customItems Custom items for the call. The default value is empty dictionary.
///
- (nonnull instancetype)initWithCalleeId:(NSString * _Nonnull)calleeId isVideoCall:(BOOL)isVideoCall callOptions:(SBCCallOptions * _Nonnull)callOptions customItems:(NSDictionary<NSString *, NSString *> * _Nonnull)customItems;
/// since:
/// 1.0.0
/// \param calleeId The callee’s user ID
///
- (nonnull instancetype)initWithCalleeId:(NSString * _Nonnull)calleeId;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE_MSG("Use `init(calleeId:)` instead.");
@end


@interface SBCDialParams (SWIFT_EXTENSION(SendBirdCalls)) <NSCopying>
/// Returns a copied instance of the <code>DialParams</code>.
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
@end

@class NSUUID;
@class SBCDirectCallUser;
enum SBCDirectCallUserRole : NSInteger;
@class SBCDirectCallLog;
enum SBCDirectCallEndResult : NSInteger;
@protocol SBCDirectCallDelegate;
enum SBCRecordingStatus : NSInteger;

/// DirectCall class for a call between two participants. Every call is identified with a unique key.
SWIFT_CLASS_NAMED("DirectCall")
@interface SBCDirectCall : NSObject
/// Call ID of the call. This value is generated from our Sendbird server and is <code>String</code> representation of a UUID
/// since:
/// 1.0.0
@property (nonatomic, readonly, copy) NSString * _Nonnull callId;
/// The UUID form of callId. Useful when dealing with CallKit.
/// since:
/// 1.0.0
@property (nonatomic, readonly, copy) NSUUID * _Nullable callUUID;
/// The caller object.
/// since:
/// 1.0.0
@property (nonatomic, readonly, strong) SBCDirectCallUser * _Nullable caller;
/// The callee object.
/// since:
/// 1.0.0
@property (nonatomic, readonly, strong) SBCDirectCallUser * _Nullable callee;
/// Custom items of the DirectCall.
/// since:
/// 1.0.0
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nonnull customItems;
/// The remote user of the call.
/// \code
/// guard let remoteUser = self.call.remoteUser else { return }
/// self.remoteUserIdLabel.text = remoteUser.userId
///
/// \endcodesince:
/// 1.0.0
@property (nonatomic, readonly, strong) SBCDirectCallUser * _Nullable remoteUser;
/// The local user of the call.
/// \code
/// guard let localUser = self.call.localUser else { return }
/// self.localUserIdLabel.text = localUser.userId
///
/// \endcodesince:
/// 1.0.0
@property (nonatomic, readonly, strong) SBCDirectCallUser * _Nullable localUser;
/// The role of the current user.
/// since:
/// 1.0.0
@property (nonatomic, readonly) enum SBCDirectCallUserRole myRole;
/// Presents <code>DirectCallLog</code> instance that is a history of the call. The value is <code>nil</code> before the call is ended. The value just after ending can be different from the value after syncing with the server.
/// since:
/// 1.1.0
@property (nonatomic, readonly, strong) SBCDirectCallLog * _Nullable callLog;
/// User that ended the call. Only exists for ended calls.
/// since:
/// 1.0.0
@property (nonatomic, readonly, strong) SBCDirectCallUser * _Nullable endedBy;
/// End Result of the ended call.
/// since:
/// 1.0.0
@property (nonatomic, readonly) enum SBCDirectCallEndResult endResult;
/// Boolean value indicating whether the call has ended.
/// since:
/// 1.0.0
@property (nonatomic, readonly) BOOL isEnded;
/// Boolean value indicating whether the call is ongoing.
/// since:
/// 1.2.0
@property (nonatomic, readonly) BOOL isOngoing;
/// The start time of call. Int64 of miliseconds.
/// important:
///
/// Returns 0 if the call hasn’t started.
/// since:
/// 1.0.0
@property (nonatomic, readonly) int64_t startedAt;
/// The ended time of call. Int64 of miliseconds.
/// important:
///
/// Returns 0 if the call hasn’t ended.
/// since:
/// 1.0.0
@property (nonatomic, readonly) int64_t endedAt;
/// The duration of the call. Int64 of miliseconds.
/// important:
///
/// Returns 0 if the call hasn’t started.
/// since:
/// 1.0.0
@property (nonatomic, readonly) int64_t duration;
/// The audio status of the remote user.
/// since:
/// 1.0.0
@property (nonatomic, readonly) BOOL isRemoteAudioEnabled;
/// The audio status of the local user.
/// since:
/// 1.0.0
@property (nonatomic, readonly) BOOL isLocalAudioEnabled;
/// The local <code>SendBirdVideoView</code>. This is a read-only property. If you want to update value, use <a href="x-source-tag://updateLocalVideoView(_)">updateLocalVideo(_:)</a>
/// since:
/// 1.0.0
/// <ul>
///   <li>
///     See Also:
///     <ul>
///       <li>
///         <a href="x-source-tag://updateLocalVideoView(_)">updateLocalVideo(_:)</a>
///       </li>
///       <li>
///         <a href="x-source-tag://SendBirdVideoView">SendBirdVideoView</a>
///       </li>
///     </ul>
///   </li>
/// </ul>
@property (nonatomic, readonly, weak) SBCVideoView * _Nullable localVideoView;
/// The remote <code>SendBirdVideoView</code>. This is a read-only property. If you want to update value, use <a href="x-source-tag://updateRemoteVideoView(_)">updateRemoteVideo(_:)</a>
/// since:
/// 1.0.0
/// <ul>
///   <li>
///     See Also:
///     <ul>
///       <li>
///         <a href="x-source-tag://updateRemoteVideoView(_)">updateRemoteVideo(_:)</a>
///       </li>
///       <li>
///         <a href="x-source-tag://SendBirdVideoView">SendBirdVideoView</a>
///       </li>
///     </ul>
///   </li>
/// </ul>
@property (nonatomic, readonly, weak) SBCVideoView * _Nullable remoteVideoView;
/// The diplaying status of the local user.
/// since:
/// 1.0.0
@property (nonatomic, readonly) BOOL isLocalVideoEnabled;
/// The displaying staus of the remote user.
/// since:
/// 1.0.0
@property (nonatomic, readonly) BOOL isRemoteVideoEnabled;
/// Indicates whether the call is on hold by either a callee or a caller, or by both.
/// since:
/// 1.8.0
@property (nonatomic, readonly) BOOL isOnHold;
/// Boolean value indicating whether the call supports video call. If <code>false</code>, the call is for audio only. The default value is <code>false</code>.
/// since:
/// 1.0.0
@property (nonatomic, readonly) BOOL isVideoCall;
/// <code>DirectCallDelegate</code> for this call. DirectCall will notify this delegate for any call-specific events.
/// \code
/// call.delegate?.someMethod()
///
/// \endcodesince:
/// 1.0.0
@property (nonatomic, weak) id <SBCDirectCallDelegate> _Nullable delegate;
/// Boolean value indicating whether the call is currently being recorded.
/// since:
/// 1.3.0
@property (nonatomic, readonly) BOOL isRecording SWIFT_DEPRECATED_MSG("isRecording has been changed to `localRecordingStatus`. ");
/// Value indicating the local recording status of the call.
/// since:
/// 1.4.0
@property (nonatomic, readonly) enum SBCRecordingStatus localRecordingStatus;
/// Value indicating the remote recording status of the call.
/// since:
/// 1.4.0
@property (nonatomic, readonly) enum SBCRecordingStatus remoteRecordingStatus;
/// Indicates whether the local user’s screen is being shared.
/// since:
/// 1.5.4
@property (nonatomic, readonly) BOOL isLocalScreenShareEnabled;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// User Role of Direct Call
/// since:
/// 1.0.0
/// <ul>
///   <li>
///     Cases:
///     <ul>
///       <li>
///         caller: The user who made the call.
///       </li>
///       <li>
///         callee: The user who received the call.
///       </li>
///     </ul>
///   </li>
/// </ul>
typedef SWIFT_ENUM_NAMED(NSInteger, SBCDirectCallUserRole, "UserRole", open) {
/// The user who made the call.
/// since:
/// 1.0.0
  SBCDirectCallUserRoleCaller = 0,
/// The user who received the call.
/// since:
/// 1.0.0
  SBCDirectCallUserRoleCallee = 1,
};




@interface SBCDirectCall (SWIFT_EXTENSION(SendBirdCalls)) <NSCopying>
/// Returns a copied instance of the <code>DirectCall</code>.
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
@end


@class SBCError;

@interface SBCDirectCall (SWIFT_EXTENSION(SendBirdCalls))
/// Starts screen share of the local user. Used with Apple’s ReplayKit.
/// \code
/// let recorder = RPScreenRecorder.shared()
///
/// call.startScreenShare { (bufferHandler, error) in
///    guard error == nil else { return }
///
///    recorder.startCapture { (buffer, bufferType, error) in
///        bufferHandler?(buffer, error)
///    } completionHandler: { (error) in
///        guard error == nil else { return } // Handle error
///        // Successfully started screen share
///    }
/// }
///
///
/// \endcodesince:
/// 1.5.4
/// \param completionHandler A handler that contains CMSampleBuffer Handler and an error depending on the result.  CMSampleBuffer Handler should be called inside the completionHandler of <code>RPScreenRecorder.startCapture</code>.
///
- (void)startScreenShareWithCompletionHandler:(void (^ _Nonnull)(void (^ _Nullable)(CMSampleBufferRef _Nonnull, NSError * _Nullable), SBCError * _Nullable))completionHandler;
/// Stops screen share of the local user.
/// <code>RPScreenRecorder.stopCapture</code> should be called before calling this method.
/// \code
/// let recorder = RPScreenRecorder.shared()
/// ...
/// recorder.stopCapture { (error) in
///     self.call.stopScreenShare()
/// }
///
/// \endcodesince:
/// 1.5.4
/// \param completionHandler A handler that contains an error depending on the result.
///
- (void)stopScreenShareWithCompletionHandler:(void (^ _Nullable)(SBCError * _Nullable))completionHandler;
@end


@interface SBCDirectCall (SWIFT_EXTENSION(SendBirdCalls))
/// The hash value of <code>DirectCall</code>.
@property (nonatomic, readonly) NSUInteger hash;
/// Returns a Boolean value that indicates whether the <code>DirectCall</code> and a given object are equal.
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end


@interface SBCDirectCall (SWIFT_EXTENSION(SendBirdCalls))
/// Removes the listener for connection quality and its monitoring modes.
/// since:
/// 1.10.5
- (void)removeConnectionQualityDelegate;
@end


@class SBCRecordingOptions;

@interface SBCDirectCall (SWIFT_EXTENSION(SendBirdCalls))
/// Starts a media recording session of a direct call. Only one ongoing recording session is allowed.
/// \code
/// let options = RecordingOptions(recordingType: .localRemoteAudios, directoryPath: FileManager.default.getDocumentsDirectory())
///
/// call.startRecording(options: options) { recorderId, error in
///     if let id = recorderId {
///         // Recording successfully started
///     }
/// }
///
///
/// \endcodesince:
/// 1.3.0
/// \param options An option that is used when creating a recording session. It contains information about the type of the recording and its settings.
///
/// \param recordingStartedHandler A handler that receives the <code>recordingId</code> and an error depending on the result.
///
- (void)startRecordingWithOptions:(SBCRecordingOptions * _Nonnull)options recordingStartedHandler:(void (^ _Nonnull)(NSString * _Nullable, SBCError * _Nullable))recordingStartedHandler;
/// Stops a media recording session with the specified <code>recordingId</code>, and depending on the result of the recording, calls the <code>didSaveRecording</code> method of a <code>SendBirdRecordingDelegate</code>.
/// \code
/// call.stopRecording(recorderId: recorderId)
///
/// \endcodesince:
/// 1.3.0
/// \param recordingId A unique identifier returned through the <code>recordingStartedHandler</code> when the <code>startRecording</code> method is called.
///
///
/// returns:
/// (discardable) Boolean value that indicates whether the specified recordingId is valid.
- (BOOL)stopRecordingWithRecordingId:(NSString * _Nonnull)recordingId;
@end





@class SBCVideoDevice;
@class UIImage;

@interface SBCDirectCall (SWIFT_EXTENSION(SendBirdCalls))
/// Starts local video. If the callee changes video settings, the caller is notified via the <code>DirectCallDelegate.didRemoteVideoSettingsChange()</code> delegate.
/// \code
/// // Start my local video
/// call.startVideo()
///
/// // receives the event
/// class MyClass: DirectCallDelegate {
///     ...
///     func didRemoteVideoSettingsChange(_ call: DirectCall) {
///         if (call.isRemoteVideoEnabled) {
///             // The peer has been unmuted.
///         } else {
///             // The peer has been muted.
///         }
///     }
///     ...
/// }
///
/// \endcodesince:
/// 1.0.0
- (void)startVideo;
/// Stops local video. If the callee changes video settings, the caller is notified via the <code>DirectCallDelegate.didRemoteVideoSettingsChange()</code> delegate.
/// \code
/// // Stop my local video
/// call.stopVideo()
///
/// // receives the event
/// class MyClass: DirectCallDelegate {
///     ...
///     func didRemoteVideoSettingsChange(_ call: DirectCall) {
///         if (call.isRemoteVideoEnabled) {
///             // The peer has been unmuted.
///         } else {
///             // The peer has been muted.
///         }
///     }
///     ...
/// }
///
/// \endcodesince:
/// 1.0.0
- (void)stopVideo;
/// Updates local <code>SendBirdVideoView</code>
/// since:
/// 1.0.0
/// <ul>
///   <li>
///     See Also: <a href="x-source-tag://SendBirdVideoView">SendBirdVideoView</a>
///   </li>
/// </ul>
/// \param videoView <code>SendBirdVideoView</code> object.
///
- (void)updateLocalVideoView:(SBCVideoView * _Nonnull)videoView;
/// Updates remote <code>SendBirdVideoView</code>
/// since:
/// 1.0.0
/// <ul>
///   <li>
///     See Also: <a href="x-source-tag://SendBirdVideoView">SendBirdVideoView</a>
///   </li>
/// </ul>
/// \param videoView <code>SendBirdVideoView</code> object.
///
- (void)updateRemoteVideoView:(SBCVideoView * _Nonnull)videoView;
/// List of available video devices that support video capture.
/// since:
/// 1.0.0
/// <ul>
///   <li>
///     See Also: <a href="x-source-tag://VideoDevice">VideoDevice</a>
///   </li>
/// </ul>
@property (nonatomic, readonly, copy) NSArray<SBCVideoDevice *> * _Nonnull availableVideoDevices;
/// Current video device using with capture device.
/// since:
/// 1.0.0
/// <ul>
///   <li>
///     See Also: <a href="x-source-tag://VideoDevice">VideoDevice</a>
///   </li>
/// </ul>
@property (nonatomic, readonly, strong) SBCVideoDevice * _Nullable currentVideoDevice;
/// Changes current video device asynchronously and notifies callback on completion.
/// since:
/// 1.0.0
/// <ul>
///   <li>
///     See Also: <a href="x-source-tag://VideoDevice">VideoDevice</a>
///   </li>
/// </ul>
/// \param device <code>VideoDevice</code> object.
///
/// \param completionHandler Callback completionHandler. Contains error.
///
- (void)selectVideoDevice:(SBCVideoDevice * _Nonnull)device completionHandler:(void (^ _Nonnull)(SBCError * _Nullable))completionHandler;
/// Toggles the selection between the front and the back camera.
/// \code
/// func flipCamera(call: DirectCall) {
///    call.switchCamera { error in
///        // do something when error has occurred.
///    }
/// }
///
/// \endcodesince:
/// 1.0.3
/// <ul>
///   <li>
///     See Also: <a href="x-source-tag://VideoDevice">VideoDevice</a>
///   </li>
/// </ul>
/// \param completionHandler Callback completionHandler. Contains error.
///
- (void)switchCameraWithCompletionHandler:(void (^ _Nonnull)(SBCError * _Nullable))completionHandler;
/// Takes a snapshot of remote video view.
/// \code
/// self.call.captureRemoteVideoView { [weak self] (image, error) in
///     if let error = error {
///        // error handling.
///        return
///     }
///     self?.snapshotImageView.image = image
/// }
///
/// \endcodesince:
/// 1.3.0
/// \param completionHandler Callback completion handler that takes snapshot image or error.
///
- (void)captureRemoteVideoViewWithCompletionHandler:(void (^ _Nonnull)(UIImage * _Nullable, SBCError * _Nullable))completionHandler;
/// Takes a snapshot of local video view.
/// \code
/// self.call.captureLocalVideoView { [weak self] (image, error) in
///     if let error = error {
///        // error handling.
///        return
///     }
///     self?.snapshotImageView.image = image
/// }
///
/// \endcodesince:
/// 1.3.0
/// \param completionHandler Callback completion handler that takes snapshot image or error.
///
- (void)captureLocalVideoViewWithCompletionHandler:(void (^ _Nonnull)(UIImage * _Nullable, SBCError * _Nullable))completionHandler;
@end


@interface SBCDirectCall (SWIFT_EXTENSION(SendBirdCalls))
/// Accepts the incoming direct call. SendBirdCalls will continue to process the call with the server.
/// since:
/// 1.0.0
/// \param params Set up the call that you’re receiving. Cannot be empty
///
- (void)acceptWithParams:(SBCAcceptParams * _Nonnull)params;
/// Ends the call. <code>DirectCallDelegate.didEnd(call:)</code> delegate method will be called after successful ending. This delegate will also be called when the remote user ends the call.
/// \code
/// // End a call
/// call.end();
///
/// // receives the event
/// class MyClass: DirectCallDelegate {
///     ...
///     func didEnd(_ call: DirectCall) {
///         //
///     }
///     ...
/// }
///
/// \endcodesince:
/// 1.0.0
- (void)end;
/// Ends the call. This method has a closeHandler that is called when the end message is successfully sent to the server.
/// note:
/// One example of implementing this method is for CallKit implementation, where CXEndCallAction should be fulfilled when call has been ended to ensure that the end command has been sent to the server before the Callkit is terminated and sent to background. Aside from that, you may choose to use the original <code>end()</code> method.
/// \code
/// func provider(_ provider: CXProvider, perform action: CXEndCallAction) {
///     // After Authenticating...
///
///     // End the call
///     call.end {
///         action.fulfill()
///     };
/// }
///
/// \endcodesince:
/// 1.0.0
- (void)endWithCloseHandler:(void (^ _Nullable)(void))closeHandler;
/// Holds the active call.
/// since:
/// 1.8.0
- (void)holdWithCompletionHandler:(void (^ _Nullable)(SBCError * _Nullable))completionHandler;
/// Removes the hold that you put on a call.
/// since:
/// 1.8.0
- (void)unholdWithForce:(BOOL)force completionHandler:(void (^ _Nullable)(SBCError * _Nullable))completionHandler;
/// Mutes the audio of local user. Will trigger <code>DirectCallDelegate.didRemoteAudioSettingsChange()</code> delegate method of the remote user. If the remote user changes their audio settings, local user will be notified via same delegate method.
/// \code
/// // mute my microphone
/// call.muteMicrophone();
///
/// // receives the event
/// class MyClass: DirectCallDelegate {
///     ...
///     func didRemoteAudioSettingsChange(_ call: DirectCall) {
///         if (call.isRemoteAudioEnabled) {
///             // The peer has been unmuted.
///         } else {
///             // The peer has been muted.
///         }
///     }
///     ...
/// }
///
/// \endcodesince:
/// 1.0.0
- (void)muteMicrophone;
/// Unmutes the audio of local user. Will trigger <code>DirectCallDelegate.didRemoteAudioSettingsChange()</code> delegate method of the remote user. If the remote user changes their audio settings, local user will be notified via same delegate method.
/// \code
/// // unmute my microphone
/// call.unmuteMicrophone();
///
/// // receives the event
/// class MyClass: DirectCallDelegate {
///     ...
///     func didRemoteAudioSettingsChange(_ call: DirectCall) {
///         if (call.isRemoteAudioEnabled) {
///             // The peer has been unmuted.
///         } else {
///             // The peer has been muted.
///         }
///     }
///     ...
/// }
///
/// \endcodesince:
/// 1.0.0
- (void)unmuteMicrophone;
/// Updates custom items of the call.
/// since:
/// 1.0.0
/// \param customItems Custom items of [String: String] to be updated or inserted.
///
/// \param completionHandler Callback completionHandler. Contains custom items, changes custom items, and error.
///
- (void)updateCustomItemsWithCustomItems:(NSDictionary<NSString *, NSString *> * _Nonnull)customItems completionHandler:(void (^ _Nonnull)(NSDictionary<NSString *, NSString *> * _Nullable, NSArray<NSString *> * _Nullable, SBCError * _Nullable))completionHandler;
/// Deletes custom items of the call.
/// since:
/// 1.0.0
/// \param customItemKeys Keys of the custom item that you want to delete.
///
/// \param completionHandler Callback completionHandler. Contains custom items, changes custom items, and error.
///
- (void)deleteCustomItemsWithCustomItemKeys:(NSArray<NSString *> * _Nonnull)customItemKeys completionHandler:(void (^ _Nonnull)(NSDictionary<NSString *, NSString *> * _Nullable, NSArray<NSString *> * _Nullable, SBCError * _Nullable))completionHandler;
/// Deletes all custom items of the call.
/// since:
/// 1.0.0
/// \param completionHandler Callback completionHandler. Contains custom items, changes custom items, and error.
///
- (void)deleteAllCustomItemsWithCompletionHandler:(void (^ _Nonnull)(NSDictionary<NSString *, NSString *> * _Nullable, NSArray<NSString *> * _Nullable, SBCError * _Nullable))completionHandler;
@end


@class AVAudioSession;
@class AVAudioSessionRouteDescription;

/// DirectCallDelegate methods are invoked along the flow of the call. You <em>should</em> implement the delegate methods to adjust your app according to the changes to the states of the call.
/// \code
/// override func viewDidLoad() {
///    // ...
///    call.delegate = self
/// }
///
/// // ...
///
/// \endcodesince:
/// 1.0.0
SWIFT_PROTOCOL_NAMED("DirectCallDelegate")
@protocol SBCDirectCallDelegate
@optional
/// Called when the callee has accepted the call, but not yet connected to media streams.
/// since:
/// 1.0.0
- (void)didEstablish:(SBCDirectCall * _Nonnull)call;
@required
/// Called when media streams between the caller and callee are connected and audio/video is enabled.
/// \code
/// func didConnect(_ call: DirectCall) {
///    self.endButton.isEnabled = true
/// }
///
/// \endcodesince:
/// 1.0.0
- (void)didConnect:(SBCDirectCall * _Nonnull)call;
@optional
/// Called when DirectCall begins attempting to reconnect to the server after losing connection.
/// since:
/// 1.0.0
- (void)didStartReconnecting:(SBCDirectCall * _Nonnull)call;
/// Called when DirectCall successfully reconnects to the server.
/// since:
/// 1.0.0
- (void)didReconnect:(SBCDirectCall * _Nonnull)call;
/// Called when the remote user changes audio settings.
/// \code
/// class MyClass: DirectCallDelegate {
///     ...
///     func didRemoteAudioSettingsChange(_ call: DirectCall) {
///         if (call.isRemoteAudioEnabled) {
///             // The peer has been unmuted.
///         } else {
///             // The peer has been muted.
///         }
///     }
///     ...
/// }
///
/// \endcodesince:
/// 1.0.0
- (void)didRemoteAudioSettingsChange:(SBCDirectCall * _Nonnull)call;
/// Called when the peer changes video settings.
/// since:
/// 1.0.0
- (void)didRemoteVideoSettingsChange:(SBCDirectCall * _Nonnull)call;
@required
/// Called when the call has ended.
/// \code
/// func didEnd(_ call: DirectCall) {
///    self.dismiss(animated: true, completion: nil)
/// }
///
/// \endcodesince:
/// 1.0.0
- (void)didEnd:(SBCDirectCall * _Nonnull)call;
@optional
/// Called when the audio device has been changed. To change audio route, see <a href="x-source-tag://routePickerView(frame)">routePickerView(frame:)</a>
/// \code
/// func didAudioDeviceChange(_ call: DirectCall, session: AVAudioSession, previousRoute: AVAudioSessionRouteDescription, reason: AVAudioSession.RouteChangeReason) {
///    // You can get current audio I/O, available inputs from the session. You can also set preferred input.
///    
///    let currentRoute = session.currentRoute
///    let outputs = currentRoute.outputs
///    let inputs = currentRoute.inputs
///
///    // Update your UI according to the changes to the audio devices, such as external speaker, bluetooth, and built-in speaker.
/// }
///
/// \endcodesince:
/// 1.0.0
/// <ul>
///   <li>
///     See Also:
///     <ul>
///       <li>
///         <a href="x-source-tag://routePickerView(frame:)">routePickerView(frame:)</a>
///       </li>
///     </ul>
///   </li>
/// </ul>
/// \param call <code>DirectCall</code> object
///
/// \param session A shared instance of <code>AVAudiosession</code>. You can get a current audio route containing inputs and outputs descriptions.
///
/// \param previousRoute A previous audio route.
///
/// \param reason The reason of system audio change.
///
- (void)didAudioDeviceChange:(SBCDirectCall * _Nonnull)call session:(AVAudioSession * _Nonnull)session previousRoute:(AVAudioSessionRouteDescription * _Nonnull)previousRoute reason:(AVAudioSessionRouteChangeReason)reason;
/// Called when the custom items of the call are updated.
/// since:
/// 1.0.0
/// \param call DirectCall that has updated custom items.
///
/// \param updatedKeys keys that have updated.
///
- (void)didUpdateCustomItemsWithCall:(SBCDirectCall * _Nonnull)call updatedKeys:(NSArray<NSString *> * _Nonnull)updatedKeys;
/// Called when the custom items of the call are deleted.
/// since:
/// 1.0.0
/// \param call DirectCall that has deleted custom items.
///
/// \param deletedKeys keys that have deleted.
///
- (void)didDeleteCustomItemsWithCall:(SBCDirectCall * _Nonnull)call deletedKeys:(NSArray<NSString *> * _Nonnull)deletedKeys;
/// Called when the other user’s recording status is changed. You can check the recording status of the other user with <code>DirectCall.remoteRecordingStatus</code>.
/// since:
/// 1.4.0
/// \param call DirectCall that has updated remote recording status.
///
- (void)didRemoteRecordingStatusChange:(SBCDirectCall * _Nonnull)call;
/// The local or remote user has put a call on hold or removed a hold from a call and their hold status has changed.
/// since:
/// 1.8.0
/// \param call DirectCall that has updated user hold status
///
/// \param isLocalUser Returns true if the user whose hold status changed is local user
///
/// \param isUserOnHold Returns true if the user’s hold status is changed to on hold
///
- (void)didUserHoldStatusChange:(SBCDirectCall * _Nonnull)call isLocalUser:(BOOL)isLocalUser isUserOnHold:(BOOL)isUserOnHold;
/// Called when the callee has received the <code>SendBirdCallDelegate.didStartRinging</code>  delegate method. This indicates that the calle has received the call notification.
/// \param call DirectCall that the callee received
///
- (void)didCalleeReceiveDial:(SBCDirectCall * _Nonnull)call;
@end

/// End results for DirectCall. Indicates reasons for failure or completion. Value for an ongoing call is <code>none</code>.
/// since:
/// 1.0.0
typedef SWIFT_ENUM_NAMED(NSInteger, SBCDirectCallEndResult, "DirectCallEndResult", open) {
/// Default value of the EndResult.
/// since:
/// 1.0.0
  SBCDirectCallEndResultNone = 0,
/// The call has ended by either the caller or callee after successful connection.
/// since:
/// 1.0.0
  SBCDirectCallEndResultCompleted = 1,
/// The caller has canceled the call before the callee accepts or declines.
/// since:
/// 1.0.0
  SBCDirectCallEndResultCanceled = 2,
/// The callee has declined the call.
/// since:
/// 1.0.0
  SBCDirectCallEndResultDeclined = 3,
/// The call is accepted on one of the callee’s other devices. All the other devices will receive this call result.
/// since:
/// 1.0.0
  SBCDirectCallEndResultOtherDeviceAccepted = 4,
/// SendBird server failed to establish a media session between the caller and callee within a specific period of time.
/// since:
/// 1.0.0
  SBCDirectCallEndResultTimedOut = 5,
/// Data streaming from either the caller or the callee has stopped due to a WebRTC connection issue while calling.
/// since:
/// 1.0.0
  SBCDirectCallEndResultConnectionLost = 6,
/// The callee hasn’t either accepted or declined the call for a specific period of time.
/// since:
/// 1.0.0
  SBCDirectCallEndResultNoAnswer = 7,
/// The dial() method of the call has failed.
/// since:
/// 1.0.0
  SBCDirectCallEndResultDialFailed = 8,
/// The accept() method of the call has failed.
/// since:
/// 1.0.0
  SBCDirectCallEndResultAcceptFailed = 9,
/// since:
/// 1.0.0
  SBCDirectCallEndResultUnknown = 10,
  SBCDirectCallEndResultNotConnected = 11,
};


/// Direct Call Log containing information about a direct call.
/// since:
/// 1.0.0
SWIFT_CLASS_NAMED("DirectCallLog")
@interface SBCDirectCallLog : NSObject
/// Call Id of the Call
/// since:
/// 1.0.0
@property (nonatomic, readonly, copy) NSString * _Nonnull callId;
/// If the call log data is from server, it returns <code>true</code>
/// since:
/// 1.1.0
@property (nonatomic, readonly) BOOL isFromServer;
/// The started time of the Call. Int64 of miliseconds.
/// since:
/// 1.0.0
@property (nonatomic, readonly) int64_t startedAt;
/// The ended time of the Call. Int64 of miliseconds.
/// since:
/// 1.0.0
@property (nonatomic, readonly) int64_t endedAt;
/// The duration of the Call. Int64 of miliseconds.
/// since:
/// 1.0.0
@property (nonatomic, readonly) int64_t duration;
/// DirectCallUser that ended the call.
/// since:
/// 1.0.0
@property (nonatomic, readonly, strong) SBCDirectCallUser * _Nullable endedBy;
/// The caller of the call.
/// since:
/// 1.0.0
@property (nonatomic, readonly, strong) SBCDirectCallUser * _Nullable caller;
/// The callee of the call.
/// since:
/// 1.0.0
@property (nonatomic, readonly, strong) SBCDirectCallUser * _Nullable callee;
/// The end result of the call.
/// since:
/// 1.0.0
@property (nonatomic, readonly) enum SBCDirectCallEndResult endResult;
/// The role of the current user in the call.
/// since:
/// 1.0.0
@property (nonatomic, readonly) enum SBCDirectCallUserRole myRole;
/// A boolean value indicating whether the call is video call.
/// since:
/// 1.0.0
@property (nonatomic, readonly) BOOL isVideoCall;
/// Custom items of DirectCallLog instance.
/// since:
/// 1.0.0
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nonnull customItems;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



@interface SBCDirectCallLog (SWIFT_EXTENSION(SendBirdCalls))
/// The hash value of <code>DirectCallLog</code>.
@property (nonatomic, readonly) NSUInteger hash;
/// Returns a Boolean value that indicates whether the <code>DirectCallLog</code> and a given object are equal.
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end

enum UserRoleFilter : NSInteger;

/// A user’s call history is available via a <code>DirectCallLogListQuery</code> instance.
/// \code
/// let params = DirectCallLogListQuery.Params()
/// let query = SendBirdCall.createDirectCallLogListQuery(with: params)
///
/// query.next { callLogs, error in
///     //
/// }
///
/// \endcodesince:
/// 1.0.0
SWIFT_CLASS_NAMED("DirectCallLogListQuery")
@interface SBCDirectCallLogListQuery : NSObject
/// If <code>true</code>, call history is being retrieved from SendBirdCall server. The default value is <code>false</code>
/// since:
/// 1.0.0
@property (nonatomic, readonly) BOOL isLoading;
/// If <code>true</code>, there is more call history to be retrieved. The default value is <code>true</code>.
/// since:
/// 1.0.0
@property (nonatomic, readonly) BOOL hasNext;
/// Returns call logs of the specified role. For example, <code>setMyRole(Callee)</code> returns only the callee’s call logs.
/// since:
/// 1.0.0
@property (nonatomic, readonly) enum UserRoleFilter myRole;
/// Returns <code>endResults</code> as a <code>NSArray</code>.
/// since:
/// 1.0.0
@property (nonatomic, readonly, strong) NSArray * _Nonnull endResultsArray;
/// The number of call logs to return at once. This is read-only property. If you want to set the limit, see <a href="x-source-tag://limit">Param.limit</a>
/// note:
/// The maximum value is 100 and the minimum is 1.
/// since:
/// 1.0.0
/// <ul>
///   <li>
///     See Also: <a href="x-source-tag://limit">Param.limit</a>
///   </li>
/// </ul>
@property (nonatomic, readonly) int32_t limit;
/// Used to query call history from SendBirdCall server.
/// since:
/// 1.0.0
- (void)nextWithCompletionHandler:(void (^ _Nonnull)(NSArray<SBCDirectCallLog *> * _Nullable, SBCError * _Nullable))completionHandler;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Filter for DirectCallLogListQuery of specific type of user in a call.
/// since:
/// 1.0.0
/// <ul>
///   <li>
///     Cases:
///     <ul>
///       <li>
///         caller: Caller in a call.
///       </li>
///       <li>
///         callee: Callee in a call.
///       </li>
///       <li>
///         all: all users.
///       </li>
///     </ul>
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSInteger, UserRoleFilter, open) {
/// Caller in a call.
/// since:
/// 1.0.0
  UserRoleFilterCaller = 0,
/// Callee in a call.
/// since:
/// 1.0.0
  UserRoleFilterCallee = 1,
/// All users.
/// since:
/// 1.0.0
  UserRoleFilterAll = 2,
};


/// Parameters for configuring DirectCallLogListQuery
/// \code
/// let params = DirectCallLogListQuery.Params()
/// let query = SendBirdCall.createDirectCallLogListQuery(with: params)
/// query.next { callLogs, error in
///     //
/// }
///
/// \endcodesince:
/// 1.0.0
SWIFT_CLASS_NAMED("Params")
@interface SBCDirectCallLogListQueryParams : NSObject
/// Filter for specified role in the calls. For example, <code>.callee</code> will only return callee’s call logs.
/// since:
/// 1.0.0
@property (nonatomic) enum UserRoleFilter myRole;
/// Returns <code>endResults</code> as a <code>NSArray</code>.
/// since:
/// 1.0.0
@property (nonatomic, readonly, strong) NSArray * _Nonnull endResultsArray;
/// Adds DirectCallEndResult to <code>endResults</code>.
/// since:
/// 1.0.0
/// \param endResult DirectCallEndResult to be added to the filter.
///
- (void)addEndResult:(enum SBCDirectCallEndResult)endResult;
/// Removes DirectCallEndResult from <code>endResults</code>.
/// since:
/// 1.0.0
/// \param endResult DirectCallEndResult to be removed from the filter.
///
- (void)removeEndResult:(enum SBCDirectCallEndResult)endResult;
/// Specifies the number of call logs to return at once.
/// note:
/// The maximum value is 100 and the minimum is 1.
/// since:
/// 1.0.0
@property (nonatomic) int32_t limit;
/// since:
/// 1.0.0
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Class for SendBirdCalls User.
/// since:
/// 1.0.0
SWIFT_CLASS_NAMED("User")
@interface SBCUser : NSObject
/// The user ID of the call user.
/// since:
/// 1.0.0
@property (nonatomic, readonly, copy) NSString * _Nonnull userId;
/// The nickname of the user.
/// since:
/// 1.0.0
@property (nonatomic, readonly, copy) NSString * _Nullable nickname;
/// The profile image URL of the user.
/// since:
/// 1.0.0
@property (nonatomic, readonly, copy) NSString * _Nullable profileURL;
/// Metadata of the user.
/// since:
/// 1.0.0
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nullable metadata;
/// Activity status of the user. If it is <code>false</code>, the user is offline. The default value is <code>false</code>.
/// since:
/// 1.0.0
@property (nonatomic, readonly) BOOL isActive;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// User class specific for direct call.
/// since:
/// 1.0.0
SWIFT_CLASS_NAMED("DirectCallUser")
@interface SBCDirectCallUser : SBCUser
/// Shows whether the user is caller or callee.
/// since:
/// 1.0.0
@property (nonatomic, readonly) enum SBCDirectCallUserRole role;
@end


@interface SBCDirectCallUser (SWIFT_EXTENSION(SendBirdCalls))
/// The hash value of <code>DirectCallUser</code>.
@property (nonatomic, readonly) NSUInteger hash;
/// Returns a Boolean value that indicates whether the <code>DirectCallUser</code> and a given object are equal.
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
/// Returns a copied instance of the <code>DirectCallUser</code>.
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
@end

enum SBCParticipantState : NSInteger;

/// A class that provides information about a participant and methods to set a participant’s audio and video.
/// since:
/// 1.6.0
SWIFT_CLASS_NAMED("Participant")
@interface SBCParticipant : NSObject
/// A unique identifier for a participant in a room.
/// since:
/// 1.6.0
@property (nonatomic, readonly, copy) NSString * _Nonnull participantId;
/// Indicates a user in Calls who corresponds to the participant.
/// since:
/// 1.6.0
@property (nonatomic, readonly, strong) SBCUser * _Nonnull user;
/// The participant’s <code>SendBirdVideoView</code>.
/// since:
/// 1.6.0
@property (nonatomic, weak) SBCVideoView * _Nullable videoView;
/// The timestamp of when the participant enter the room, in Unix milliseconds.
/// since:
/// 1.6.0
@property (nonatomic, readonly) int64_t enteredAt;
/// The timestamp of when the participant information was updated within the room, in Unix milliseconds.
/// since:
/// 1.6.0
@property (nonatomic, readonly) int64_t updatedAt;
/// The timestamp of when the participant exited the room, in Unix milliseconds. If the value is 0, it means the participant is present in the room.
/// since:
/// 1.6.0
@property (nonatomic, readonly) int64_t exitedAt;
/// The period from the time when the participant entered the room to the time the participant left the room, measured in seconds. If the value is 0, it means the participant is present in the room.
/// since:
/// 1.6.0
@property (nonatomic, readonly) int64_t duration;
/// The state of the participant. Valid values are entered, exited, and connected.
/// since:
/// 1.6.0
@property (nonatomic, readonly) enum SBCParticipantState state;
/// Indicates whether the participant has enabled their audio.
/// since:
/// 1.6.0
@property (nonatomic, readonly) BOOL isAudioEnabled;
/// Indicates whether the participant has enabled their video.
/// since:
/// 1.6.0
@property (nonatomic, readonly) BOOL isVideoEnabled;
/// The hash value of <code>Participant</code>.
@property (nonatomic, readonly) NSUInteger hash;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// A enum that provides information about the state of a participant.
/// since:
/// 1.6.0
typedef SWIFT_ENUM_NAMED(NSInteger, SBCParticipantState, "State", open) {
/// Indicates that a participant entered the room.
/// since:
/// 1.6.0
  SBCParticipantStateEntered = 0,
/// Indicates that a participant is connected and streaming media.
/// since:
/// 1.6.0
  SBCParticipantStateConnected = 1,
/// Indicates that a participant exited the room.
/// since:
/// 1.6.0
  SBCParticipantStateExited = 2,
};


/// A class that contains all operational methods of a local participant to handle their audio and video.
/// note:
/// LocalParticipant contains all properties of Participant
/// since:
/// 1.6.0
SWIFT_CLASS_NAMED("LocalParticipant")
@interface SBCLocalParticipant : SBCParticipant
/// Mutes the local user’s audio.
/// since:
/// 1.6.0
- (void)muteMicrophone;
/// Unmutes the local user’s audio.
/// since:
/// 1.6.0
- (void)unmuteMicrophone;
/// Starts the local user’s video.
/// since:
/// 1.6.0
- (void)startVideo;
/// Stops the local user’s video.
/// since:
/// 1.6.0
- (void)stopVideo;
/// Switches the local user’s front and back cameras.
/// \code
/// call.switchCamera { error in
///    // handle error
/// }
///
/// \endcodesince:
/// 1.6.0
/// \param completionHandler Callback completion handler containing error.
///
- (void)switchCameraWithCompletionHandler:(void (^ _Nonnull)(SBCError * _Nullable))completionHandler;
@end









enum SBCRecordingType : NSInteger;
@class NSURL;

/// Recording option that is used when starting a recording session.
/// since:
/// 1.3.0
SWIFT_CLASS_NAMED("RecordingOptions")
@interface SBCRecordingOptions : NSObject
/// Used to specify a type of recording that specifies which participant or media to record such as <code>remoteAudioAndVideo</code>.
/// since:
/// 1.3.0
@property (nonatomic, readonly) enum SBCRecordingType recordingType;
/// Used to specify the base directory path of where the recorded file will be saved
/// since:
/// 1.3.0
@property (nonatomic, readonly, copy) NSURL * _Nonnull directoryPath;
/// Used to specify a name of the recorded file. If unspecified, it will be saved as <code>{type}_{callId}_{timestamp}</code>.
/// since:
/// 1.3.0
@property (nonatomic, readonly, copy) NSString * _Nullable fileName;
- (nonnull instancetype)initWithRecordingType:(enum SBCRecordingType)recordingType directoryPath:(NSURL * _Nonnull)directoryPath fileName:(NSString * _Nullable)fileName OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE_MSG("Use `init(recordingType:directoryPath:fileName:)` instead.");
@end

typedef SWIFT_ENUM_NAMED(NSInteger, SBCRecordingType, "RecordingType", open) {
/// An option to record the video and audio of the remote user
/// since:
/// 1.3.0
  SBCRecordingTypeRemoteAudioAndVideo = 0,
/// An option to record the audio of the remote user.
/// since:
/// 1.3.0
  SBCRecordingTypeRemoteAudioOnly = 1,
/// An option to record both audios of the local and remote users.
/// since:
/// 1.3.0
  SBCRecordingTypeLocalRemoteAudios = 2,
/// An option to record both audios of the local and remote users, and the video of the remote user.
/// since:
/// 1.3.0
  SBCRecordingTypeLocalAudioRemoteAudioAndVideo = 3,
/// An option to record both audios of the local and remote users, and the video of the local user.
/// since:
/// 1.3.0
  SBCRecordingTypeLocalAudioAndVideoRemoteAudio = 4,
};

/// Recording status that indicates the recording status of a call.
/// since:
/// 1.4.0
typedef SWIFT_ENUM_NAMED(NSInteger, SBCRecordingStatus, "RecordingStatus", open) {
  SBCRecordingStatusRecording = 0,
  SBCRecordingStatusNone = 1,
};


/// A class that contains all operational methods of a remote participant.
/// since:
/// 1.6.0
/// note:
/// RemoteParticipant contains all properties of Participant
SWIFT_CLASS_NAMED("RemoteParticipant")
@interface SBCRemoteParticipant : SBCParticipant
@end

enum SBCRoomState : NSInteger;
enum RoomType : NSInteger;
@class SBCRoomEnterParams;
@protocol SBCRoomDelegate;
@class RoomInvitation;

/// A class that provides the <code>enter()</code>, <code>exit()</code>, and other methods, which handle information about the room and operate with other types of objects such as a participant.
/// since:
/// 1.6.0
SWIFT_CLASS_NAMED("Room")
@interface SBCRoom : NSObject
/// Returns a room ID.
/// since:
/// 1.6.0
@property (nonatomic, readonly, copy) NSString * _Nonnull roomId;
/// The timestamp of when the room was created, in Unix milliseconds.
/// since:
/// 1.6.0
@property (nonatomic, readonly) int64_t createdAt;
/// The ID of a user who created a room.
/// since:
/// 1.6.0
@property (nonatomic, readonly, copy) NSString * _Nonnull createdBy;
/// The local participant in a room.
/// since:
/// 1.6.0
@property (nonatomic, readonly, strong) SBCLocalParticipant * _Nullable localParticipant;
/// The list of all participants in a room.
/// since:
/// 1.6.0
@property (nonatomic, readonly, copy) NSArray<SBCParticipant *> * _Nonnull participants;
/// The list of remote participants in a room.
/// since:
/// 1.6.0
@property (nonatomic, readonly, copy) NSArray<SBCRemoteParticipant *> * _Nonnull remoteParticipants;
/// The state of a room. Valid values are <code>.open</code> and <code>.deleted</code>.
/// since:
/// 1.6.0
@property (nonatomic, readonly) enum SBCRoomState state;
/// Indicates the room type as audio or video and the capacity of a room.
/// since:
/// 1.6.0
@property (nonatomic, readonly) enum RoomType type;
/// Custom items for this room
/// since:
/// 1.8.0
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nonnull customItems;
/// Enters a room. The participant’s audio or video can be configured with <code>RoomEnterParams</code> when entering.
/// since:
/// 1.6.0
/// \param completionHandler Callback completionHandler to be called after entering the room.
///
- (void)enterWithParams:(SBCRoomEnterParams * _Nonnull)params completionHandler:(void (^ _Nonnull)(SBCError * _Nullable))completionHandler;
/// Exits a room.
/// since:
/// 1.6.0
///
/// throws:
/// 1800702 error code if the participant is not in the room and the request can’t be processed.
- (BOOL)exitAndReturnError:(NSError * _Nullable * _Nullable)error;
/// Get latest custom items for this room
- (void)fetchCustomItemsWithCompletionHandler:(void (^ _Nonnull)(NSDictionary<NSString *, NSString *> * _Nullable, SBCError * _Nullable))completionHandler;
/// Updates custom items for this room.
/// since:
/// 1.8.0
/// \param customItems Custom items (String dictionary) to be updated or inserted.
///
/// \param completionHandler Callback completionHandler. Contains custom items, changes custom items, and error.
///
- (void)updateCustomItemsWithCustomItems:(NSDictionary<NSString *, NSString *> * _Nonnull)customItems completionHandler:(void (^ _Nonnull)(NSDictionary<NSString *, NSString *> * _Nullable, NSArray<NSString *> * _Nullable, SBCError * _Nullable))completionHandler;
/// Deletes custom items of the call.
/// since:
/// 1.8.0
/// \param customItemKeys Keys of the custom item that you want to delete.
///
/// \param completionHandler Callback completionHandler. Contains custom items, changes custom items, and error.
///
- (void)deleteCustomItemsWithCustomItemKeys:(NSArray<NSString *> * _Nonnull)customItemKeys completionHandler:(void (^ _Nonnull)(NSDictionary<NSString *, NSString *> * _Nullable, NSArray<NSString *> * _Nullable, SBCError * _Nullable))completionHandler;
/// Deletes all custom items of the call.
/// since:
/// 1.8.0
/// \param completionHandler Callback completionHandler. Contains custom items, changes custom items, and error.
///
- (void)deleteAllCustomItemsWithCompletionHandler:(void (^ _Nonnull)(NSDictionary<NSString *, NSString *> * _Nullable, NSArray<NSString *> * _Nullable, SBCError * _Nullable))completionHandler;
/// Adds <code>RoomDelegate</code> to receive events about a room.
/// \code
/// room.addDelegate(self, identifier: UNIQUE_ID)
///
/// \endcodesince:
/// 1.6.0
/// \param delegate <code>RoomDelegate</code> that listens to <code>Room</code> events.
///
/// \param identifier Identifier for the specific delegate.
///
- (void)addDelegate:(id <SBCRoomDelegate> _Nonnull)delegate identifier:(NSString * _Nonnull)identifier;
/// Removes a delegate to stop receiving events about a room.
/// \code
/// room.removeDelegate(identifier: UNIQUE_ID)
///
/// \endcodesince:
/// 1.6.0
/// \param identifier String identifier for the delegate. If the room doesn’t have the given identifier, it will be ignored.
///
- (void)removeDelegateWithIdentifier:(NSString * _Nonnull)identifier;
/// Removes all delegate to stop receiving events about a room.
/// since:
/// 1.6.0
- (void)removeAllDelegates;
/// Send an invitation to the specified user to enter the room.
/// since:
/// 1.10.0
- (void)sendInvitationWithInvitee:(NSString * _Nonnull)invitee completionHandler:(void (^ _Nullable)(RoomInvitation * _Nullable, SBCError * _Nullable))completionHandler;
/// Deletes the room. All participants in the room will be exited and the room can’t be restored.
/// since:
/// 1.10.0
- (void)deleteWithCompletionHandler:(void (^ _Nullable)(SBCError * _Nullable))completionHandler;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface SBCRoom (SWIFT_EXTENSION(SendBirdCalls))
@end

/// A enum that provides information about the state of a room.
/// since:
/// 1.6.0
typedef SWIFT_ENUM_NAMED(NSInteger, SBCRoomState, "State", open) {
/// Indicates a room is open and available for group calls.
/// since:
/// 1.6.0
  SBCRoomStateOpen = 0,
/// Indicates a room is deleted.
/// since:
/// 1.6.0
  SBCRoomStateDeleted = 1,
};



@interface SBCRoom (SWIFT_EXTENSION(SendBirdCalls))
@end


/// A class that provides the methods to enable audio and video settings.
/// since:
/// 1.6.0
SWIFT_CLASS_NAMED("EnterParams")
@interface SBCRoomEnterParams : NSObject
/// Enables a participant’s video settings when entering a room.
/// since:
/// 1.6.0
@property (nonatomic) BOOL isVideoEnabled;
/// Enables a participant’s audio settings when entering a room.
@property (nonatomic) BOOL isAudioEnabled;
/// since:
/// 1.10.3
@property (nonatomic) BOOL kickSiblings;
/// Initializes <code>RoomEnterParams</code>.
/// \param isVideoEnabled if <code>true</code>, enables a participant’s video settings when entering a room.
///
/// \param isAudioEnabled if <code>true</code>, enables a participant’s audio settings when entering a room.
///
- (nonnull instancetype)initWithIsVideoEnabled:(BOOL)isVideoEnabled isAudioEnabled:(BOOL)isAudioEnabled kickSiblings:(BOOL)kickSiblings OBJC_DESIGNATED_INITIALIZER;
/// Initializes <code>RoomEnterParams</code>.
- (nonnull instancetype)init;
@end






/// RoomDelegate methods are invoked along the flow of the room. You <em>should</em> implement the delegate methods to adjust your app according to the changes to the states of the room.
/// \code
/// override func viewDidLoad() {
///    // ...
///    room.addDelegate(self, identifier: "identifier")
/// }
///
/// // ...
///
/// \endcodesince:
/// 1.6.0
SWIFT_PROTOCOL_NAMED("RoomDelegate")
@protocol SBCRoomDelegate
@optional
/// Called when a remote participant has entered a room.
/// since:
/// 1.6.0
/// <ul>
///   <li>
///     Parameters
///     <ul>
///       <li>
///         participant: <code>RemoteParticipant</code> object.
///       </li>
///     </ul>
///   </li>
/// </ul>
- (void)didRemoteParticipantEnter:(SBCRemoteParticipant * _Nonnull)participant;
/// Called when a remote participant has exited a room.
/// since:
/// 1.6.0
/// <ul>
///   <li>
///     Parameters
///     <ul>
///       <li>
///         participant: <code>RemoteParticipant</code> object.
///       </li>
///     </ul>
///   </li>
/// </ul>
- (void)didRemoteParticipantExit:(SBCRemoteParticipant * _Nonnull)participant;
/// Called when a remote participant has started media streaming
/// since:
/// 1.6.0
/// <ul>
///   <li>
///     Parameters
///     <ul>
///       <li>
///         participant: <code>RemoteParticipant</code> object.
///       </li>
///     </ul>
///   </li>
/// </ul>
- (void)didRemoteParticipantStreamStart:(SBCRemoteParticipant * _Nonnull)participant;
/// Called when a remote partcipant’s audio settings has changed.
/// since:
/// 1.6.0
/// <ul>
///   <li>
///     Parameters
///     <ul>
///       <li>
///         participant: <code>RemoteParticipant</code> object.
///       </li>
///     </ul>
///   </li>
/// </ul>
- (void)didRemoteAudioSettingsChange:(SBCRemoteParticipant * _Nonnull)participant;
/// Called when a remote participant’s video settings has changed.
/// since:
/// 1.6.0
/// <ul>
///   <li>
///     Parameters
///     <ul>
///       <li>
///         participant: <code>RemoteParticipant</code> object.
///       </li>
///     </ul>
///   </li>
/// </ul>
- (void)didRemoteVideoSettingsChange:(SBCRemoteParticipant * _Nonnull)participant;
/// Invoked when the local participant’s connection with the server has been interrupted.
/// since:
/// 1.10.1
/// \param participant <code>LocalParticipant</code> object
///
- (void)didLocalParticipantDisconnect:(SBCLocalParticipant * _Nonnull)participant;
/// Invoked when the local participant’s connection with the server has been established.
/// since:
/// 1.10.1
/// \param participant <code>LocalParticipant</code> object
///
- (void)didLocalParticipantReconnect:(SBCLocalParticipant * _Nonnull)participant;
/// Called when the custom items of the room are updated.
/// since:
/// 1.8.0
/// \param updatedKeys keys that have updated.
///
- (void)didCustomItemsUpdateWithUpdatedKeys:(NSArray<NSString *> * _Nonnull)updatedKeys;
/// Called when the custom items of the room are deleted.
/// since:
/// 1.8.0
/// \param deletedKeys keys that have deleted.
///
- (void)didCustomItemsDeleteWithDeletedKeys:(NSArray<NSString *> * _Nonnull)deletedKeys;
/// Called when an error occurs on Sendbird server while processing a request.
/// since:
/// 1.6.0
/// <ul>
///   <li>
///     Parameters
///     <ul>
///       <li>
///         error: <code>Error</code> object.
///       </li>
///     </ul>
///   </li>
/// </ul>
- (void)didReceiveError:(SBCError * _Nonnull)error participant:(SBCParticipant * _Nullable)participant;
/// Called when the room has been deleted
/// since:
/// 1.9.0
- (void)didDelete;
- (void)didAudioDeviceChange:(SBCRoom * _Nonnull)room session:(AVAudioSession * _Nonnull)session previousRoute:(AVAudioSessionRouteDescription * _Nonnull)previousRoute reason:(AVAudioSessionRouteChangeReason)reason;
/// Invoked when the inviter cancels the invitation.
/// since:
///
- (void)wasInvitationCanceled:(RoomInvitation * _Nonnull)invitation;
/// Invoked when the invitee accepts the invitation to enter the room.
/// since:
///
- (void)wasInvitationAccepted:(RoomInvitation * _Nonnull)invitation;
/// Invoked when the invitee declines the invitation to enter the room.
/// since:
///
- (void)wasInvitationDeclined:(RoomInvitation * _Nonnull)invitation;
@end


/// A class that provides information about an invitation.
/// since:
/// 1.10.0
SWIFT_CLASS("_TtC13SendBirdCalls14RoomInvitation")
@interface RoomInvitation : NSObject
/// The user who sent the invitation.
/// since:
/// 1.10.0
@property (nonatomic, readonly, strong) SBCUser * _Nonnull inviter;
/// The user to whom the invitation is sent.
/// since:
/// 1.10.0
@property (nonatomic, readonly, strong) SBCUser * _Nonnull invitee;
/// Accepts an invitation to enter the room.
/// since:
/// 1.10.0
- (void)acceptWithCompletionHandler:(void (^ _Nullable)(SBCError * _Nullable))completionHandler;
/// Declines an invitation to enter the room.
/// since:
/// 1.10.0
- (void)declineWithCompletionHandler:(void (^ _Nullable)(SBCError * _Nullable))completionHandler;
/// Cancels an invitation sent to the specified user.
/// since:
/// 1.10.0
- (void)cancelWithCompletionHandler:(void (^ _Nullable)(SBCError * _Nullable))completionHandler;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// A class that is used to query Rooms.
/// since:
/// 1.7.0
SWIFT_CLASS_NAMED("RoomListQuery")
@interface SBCRoomListQuery : NSObject
/// Determines whether the query is loading.
/// since:
/// 1.7.0
@property (nonatomic) BOOL isLoading;
/// Indicates whether there are more rooms to be queried.
/// since:
/// 1.7.0
@property (nonatomic) BOOL hasNext;
/// Retrieves the list of rooms after the last result set.
/// since:
/// 1.7.0
/// \param completionHandler A callback function that receives information about a list of rooms or an error from Sendbird server.
///
- (void)nextWithCompletionHandler:(void (^ _Nonnull)(NSArray<SBCRoom *> * _Nullable, SBCError * _Nullable))completionHandler;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class SBCRange;

/// A class that provides configuration for RoomListQuery
/// since:
/// 1.7.0
SWIFT_CLASS_NAMED("Params")
@interface SBCRoomListQueryParams : NSObject
/// The number of rooms to be retrieved at once.
/// since:
/// 1.7.0
@property (nonatomic) NSUInteger limit;
/// Filters query results to include rooms with the specified room type.
/// since:
/// 1.7.0
- (NSArray * _Nonnull)getTypes SWIFT_WARN_UNUSED_RESULT;
/// Filters query results to include room with the specified room state.
/// since:
/// 1.7.0
- (NSArray * _Nonnull)getState SWIFT_WARN_UNUSED_RESULT;
/// Filters query results to include rooms that were created by specified user IDs.
/// since:
/// 1.7.0
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull createdByUserIds;
/// Filters query results to include rooms that match the specified room IDs.
/// since:
/// 1.7.0
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull roomIds;
/// Filters query results to include rooms that were created between the specified range of time.
/// since:
/// 1.7.0
@property (nonatomic, strong) SBCRange * _Nonnull createdAtRange;
/// Filters query results to include rooms with the specified range of numbers for current participants.
/// since:
/// 1.7.0
@property (nonatomic, strong) SBCRange * _Nonnull currentParticipantCountRange;
/// Filters query results to include rooms with the specified room type.
/// since:
/// 1.7.0.
- (nonnull instancetype)setType:(enum RoomType)type;
/// Filters query results to include room with the specified room state.
/// since:
/// 1.7.0.
- (nonnull instancetype)setState:(enum SBCRoomState)state;
/// Filters query results to include rooms with the specified range of numbers for current participants.
/// since:
/// 1.7.0
- (nonnull instancetype)setRangeForCurrentParticipantCount:(NSRange)range;
/// Filters query results to include rooms that were created between the specified range of time.
/// since:
/// 1.7.0
- (nonnull instancetype)setRangeForCreatedAt:(NSRange)range;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// A class that provides information for creating a new room
/// since:
/// 1.6.0
SWIFT_CLASS_NAMED("RoomParams")
@interface SBCRoomParams : NSObject
/// Sets the type of the room. Valid values are <code>smallRoomForVideo</code> and <code>largeRoomForAudioOnly</code>.
/// since:
/// 1.6.0
@property (nonatomic) enum RoomType roomType;
/// Sets custom items for the room
/// since:
/// 1.8.0
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nullable customItems;
/// Initializes <code>RoomParams</code>.
/// since:
/// 1.6.0
/// \param roomType Sets the type of the room. Valid values are <code>smallRoomForVideo</code> and <code>largeRoomForAudioOnly</code>.
///
- (nonnull instancetype)initWithRoomType:(enum RoomType)roomType OBJC_DESIGNATED_INITIALIZER;
/// Initializes <code>RoomParams</code>.
/// since:
/// 1.8.0
/// \param roomType Sets the type of the room. Valid values are <code>smallRoomForVideo</code> and <code>largeRoomForAudioOnly</code>.
///
/// \param customItems Custom items for this room
///
- (nonnull instancetype)initWithRoomType:(enum RoomType)roomType customItems:(NSDictionary<NSString *, NSString *> * _Nonnull)customItems OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE_MSG("Use `init(roomType:)` instead.");
@end

/// An enum that represents different types of a room.
/// since:
/// 1.6.0
typedef SWIFT_ENUM(NSInteger, RoomType, open) {
/// Type of a room that supports audio and video, can have up to 6 participants.
/// since:
/// 1.6.0
  RoomTypeSmallRoomForVideo = 0,
/// Type of a room that only supports audio and can have up to 20 participants.
/// since:
/// 1.6.0
  RoomTypeLargeRoomForAudioOnly = 1,
};

enum SBCErrorCode : NSInteger;
@class NSCoder;

/// Custom Error class for SendBirdCalls. Subclass of NSError.
/// since:
/// 1.0.0
SWIFT_CLASS("_TtC13SendBirdCalls8SBCError")
@interface SBCError : NSError
/// Error Code that represents the type of the error.
/// since:
/// 1.0.6
@property (nonatomic, readonly) enum SBCErrorCode errorCode;
- (nonnull instancetype)initWithDomain:(NSString * _Nonnull)domain code:(NSInteger)code userInfo:(NSDictionary<NSString *, id> * _Nullable)userInfo SWIFT_UNAVAILABLE;
/// since:
/// 1.0.0
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

/// Custom Error codes representing different error scenarios.
/// since:
/// 1.0.0
typedef SWIFT_ENUM_NAMED(NSInteger, SBCErrorCode, "ErrorCode", open) {
/// since:
/// 1.0.0
  SBCErrorCodeDialCanceled = 1800100,
/// since:
/// 1.0.0
  SBCErrorCodeMyUserIdNotAllowed = 1800101,
/// since:
/// 1.0.0
  SBCErrorCodeRequestFailed = 1800200,
/// since:
/// 1.0.0
  SBCErrorCodeWebsocketConnectionNotOpened = 1800201,
/// since:
/// 1.0.0
  SBCErrorCodeWebsocketConnectionFailed = 1800202,
/// since:
/// 1.0.0
  SBCErrorCodeNoResponseDueToTimeout = 1800203,
/// since:
/// 1.0.0
  SBCErrorCodeRequestFailedDueToWebsocketConnectionLost = 1800204,
/// since:
/// 1.0.0
  SBCErrorCodeWrongResponse = 1800205,
/// since:
/// 1.0.0
  SBCErrorCodeQueryInProgress = 1800206,
/// since:
/// 1.0.0
  SBCErrorCodeInternalServerError = 1800207,
/// since:
/// 1.0.0
  SBCErrorCodeMalformedData = 1800208,
/// since:
/// 1.0.0
  SBCErrorCodeInvalidParameterValue = 1800300,
/// since:
/// 1.0.0
  SBCErrorCodeInvalidParameterType = 1800301,
/// since:
/// 1.0.0
  SBCErrorCodeInstanceNotInitialized = 1800302,
/// since:
/// 1.0.0
  SBCErrorCodeNotAuthenticated = 1800303,
/// since:
/// 1.0.0
  SBCErrorCodeChangingVideoDeviceNotSupported = 1800403,
/// since:
/// 1.0.0
  SBCErrorCodeChangingVideoDeviceInProgress = 1800404,
/// since:
/// 1.0.0
  SBCErrorCodeChangingVideoDeviceFailed = 1800405,
/// since:
/// 1.3.0
  SBCErrorCodeCaptureNotAllowedOnAudioCall = 1800600,
/// since:
/// 1.3.0
  SBCErrorCodeVideoViewNotReady = 1800601,
/// since:
/// 1.3.0
  SBCErrorCodeVideoCallNotConnectedYet = 1800602,
/// since:
/// 1.3.0
  SBCErrorCodeFailedToGetImageFromVideoStream = 1800603,
/// since:
/// 1.3.0
  SBCErrorCodeCallNotConnectedYet = 1800610,
/// since:
/// 1.3.0
  SBCErrorCodeWrongRecordingTypeForAudioCall = 1800611,
/// since:
/// 1.3.0
  SBCErrorCodeRecordingAlreadyInProgress = 1800612,
/// since:
/// 1.3.0
  SBCErrorCodeFailedToStartRecording = 1800614,
/// since:
/// 1.3.0
  SBCErrorCodeFailedToStopRecording = 1800615,
/// since:
/// 1.5.4
  SBCErrorCodeScreenShareRestrictedFromAudioCall = 1800620,
/// since:
/// 1.5.4
  SBCErrorCodeScreenShareRequestBeforeCallIsConnected = 1800621,
/// since:
/// 1.5.4
  SBCErrorCodeScreenShareAlreadyInProgress = 1800622,
/// since:
/// 1.5.4
  SBCErrorCodeNoScreenShareExists = 1800623,
/// since:
/// 1.8.0
  SBCErrorCodeCallPutOnHold = 1800632,
/// since:
/// 1.6.0
  SBCErrorCodeClientAlreadyEntered = 1800700,
/// since:
/// 1.6.0
  SBCErrorCodeEnteringRoomStillInProgress = 1800701,
/// since:
/// 1.6.0
  SBCErrorCodeParticipantNotInRoom = 1800702,
/// since:
/// 1.6.0
  SBCErrorCodeLocalParticipantLostConnection = 1800706,
/// since:
/// 1.10.3
  SBCErrorCodeLocalParticipantKickedOut = 1800707,
/// since:
/// 1.8.0
  SBCErrorCodeCallAlreadyOnHold = 1800801,
/// since:
/// 1.8.0
  SBCErrorCodeCallNotPutOnHoldByLocalUser = 1800802,
/// since:
/// 1.8.0
  SBCErrorCodeAnotherCallInProgress = 1800803,
/// since:
/// 1.6.0
  SBCErrorCodeInvalidParams = 400100,
/// since:
/// 1.6.0
  SBCErrorCodeMissingParams = 400111,
/// since:
/// 1.6.0
  SBCErrorCodeNotFound = 400200,
/// since:
/// 1.6.0
  SBCErrorCodeUniqueConstraint = 400201,
/// since:
/// 1.6.0
  SBCErrorCodeFreePlanEnded = 400800,
/// since:
/// 1.6.0
  SBCErrorCodeNotAllowed = 401120,
/// since:
/// 1.6.0
  SBCErrorCodeNotAuthorized = 401121,
/// since:
/// 1.0.6
  SBCErrorCodeServerInternalError = 1400999,
/// since:
/// 1.0.6
  SBCErrorCodeInvalidCallStatus = 1400101,
/// since:
/// 1.0.6
  SBCErrorCodeCallDoesNotExist = 1400102,
/// since:
/// 1.0.6
  SBCErrorCodeCalleeDoesNotExist = 1400103,
/// since:
/// 1.0.6
  SBCErrorCodeDialMyself = 1400104,
/// since:
/// 1.0.6
  SBCErrorCodeNoPermission = 1400105,
/// since:
/// 1.0.6
  SBCErrorCodeCalleeNeverAuthenticate = 1400106,
/// since:
/// 1.6.0
  SBCErrorCodeParticipantsLimitExceededInRoom = 1400120,
/// since:
/// 1.6.0
  SBCErrorCodeInvalidParticipantId = 1400121,
/// since:
/// 1.6.0
  SBCErrorCodeClientIdAlreadyExists = 1400122,
/// since:
/// 1.6.0
  SBCErrorCodeInvalidRequest = 1400123,
/// since:
/// 1.6.0
  SBCErrorCodeEndpointToSendStreamAlreadyExists = 1400124,
/// since:
/// 1.9.0
  SBCErrorCodeRoomDeleted = 1400126,
/// since:
/// 1.6.0
  SBCErrorCodeUnknownError = 500999,
};



/// since:
/// 1.0.0
SWIFT_PROTOCOL("_TtP13SendBirdCalls14SBCLogReceiver_")
@protocol SBCLogReceiver
/// Delegate method to be called when new log is generated. You have to implement this method to use the logs in your app.
/// \code
/// var logs: [String] = []
///
/// func log(message: String) {
///    self.logs.append(message)
///    self.updateLogsView()
/// }
///
/// func updateLogsView() {
///    // ...
/// }
///
/// \endcodesince:
/// 1.0.0
- (void)logMessage:(NSString * _Nonnull)message;
@end

enum SBCLoggerLevel : NSInteger;

/// since:
/// 1.0.0
SWIFT_CLASS("_TtC13SendBirdCalls9SBCLogger")
@interface SBCLogger : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Adds a custom log receiver to the SendBirdCall Logger.
/// \code
/// override func viewDidLoad() {
///    // ...
///    
///    SBCLogger.add(receiver: self)
/// }
///
/// \endcodesince:
/// 1.0.0
/// \param receiver The object implemented<code>SBCLogReceiver</code> to receive logs
///
+ (void)addLogReceiver:(id <SBCLogReceiver> _Nonnull)receiver;
/// Removes the custom log receiver from the SendBirdCall Logger.
/// \code
/// SBCLogger.remove(receiver: self)
///
/// \endcodesince:
/// 1.0.0
/// \param receiver The object inheritted<code>SBCLogReceiver</code>
///
+ (void)removeLogReceiver:(id <SBCLogReceiver> _Nonnull)receiver;
/// Update the logger level.
/// The log level decides what kind of logs are printed to the console and delivered to custom log receivers.
/// \code
/// SBCLogger.setLoggerLevel(.none)
///
/// \endcodesince:
/// 1.1.0
/// <ul>
///   <li>
///     See Also: <a href="x-source-tag://LoggerLevel">LoggerLevel</a>
///   </li>
/// </ul>
/// \param level The Logger Level value indicates the level to which it will be used.
///
+ (void)setLoggerLevel:(enum SBCLoggerLevel)level;
@end



@interface SBCLogger (SWIFT_EXTENSION(SendBirdCalls))
@end

/// Logger Level enumeration.
/// Log will not be exposed if the priority value is lower than the configured log level.
/// Logger Level follows the following priority:
/// <code>info < warning < error < none.</code>
/// <ul>
///   <li>
///     Cases:
///     <ul>
///       <li>
///         info: Informational messages that are general to the application.
///       </li>
///       <li>
///         warning: Potentially problematic situation that may indicate potential problems.
///       </li>
///       <li>
///         error: Error events that may represent the failure of normal program execution.
///       </li>
///       <li>
///         none: No logging.
///       </li>
///     </ul>
///   </li>
/// </ul>
typedef SWIFT_ENUM_NAMED(NSInteger, SBCLoggerLevel, "Level", open) {
/// Informational messages that are general to the application.
/// since:
/// 1.1.0
  SBCLoggerLevelInfo = 0,
/// Potentially problematic situation that may indicate potential problems.
/// since:
/// 1.1.0
  SBCLoggerLevelWarning = 1,
/// Error events that may represent the failure of normal program execution.
/// since:
/// 1.1.0
  SBCLoggerLevelError = 2,
/// No logging.
/// since:
/// 1.1.0
  SBCLoggerLevelNone = 3,
};

@class UIView;
@protocol SBCSendBirdCallDelegate;
@protocol SBCSendBirdRecordingDelegate;
@class PKPushRegistry;
@class PKPushPayload;
@class NSData;
@class UIApplication;
@class NSBundle;
enum SBCSoundType : NSInteger;

/// SendBirdCall
SWIFT_CLASS_NAMED("SendBirdCall")
@interface SBCSendBirdCall : NSObject
/// The app id of your SendBirdCalls application. Configure the app id using <a href="x-source-tag://configure(appId)">configure(appId:)</a>. This is get-only property.
/// important:
/// If you change the app ID, a previous configured app ID will be removed and all calls will be canceled.
/// \code
/// SendBirdCall.appId    // "Optional(YOUR_APP_ID)"
///
/// \endcodesince:
/// 1.0.0
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nullable appId;)
+ (NSString * _Nullable)appId SWIFT_WARN_UNUSED_RESULT;
/// Initiate <code>SendBirdCall</code> instance when a client app is launched. If another initialization with another <code>APP_ID</code> takes place, all existing data will be deleted and the <code>SendBirdCall</code> instance will be initialized with the new <code>APP_ID</code>.
/// \code
/// SendBirdCall.configure(appId: "YOUR_APP_ID")
///
/// \endcodesince:
/// 1.0.0
/// \param appId Your own app ID from your dashboard
///
///
/// returns:
/// (Discardable)<code>Bool</code> value. If the paramter has an empty string or equal previous app ID, it returns <code>false</code>.
/// If the method configures app ID successfully, it returns <code>true</code>.
+ (BOOL)configureWithAppId:(NSString * _Nonnull)appId;
/// SendBirdCalls SDK Version
/// \code
/// self.versionLabel.text = "SendBirdCalls v\(SendBirdCall.sdkVersion)"
///
/// // "SendBirdCalls v1.0.0"
///
/// \endcodesince:
/// 1.0.0
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull sdkVersion;)
+ (NSString * _Nonnull)sdkVersion SWIFT_WARN_UNUSED_RESULT;
/// Provides a view that allows user to change the system audio route. Returns <a href="https://developer.apple.com/documentation/avkit/avroutepickerview">AVRoutePickerView</a> in iOS 11 or later and <a href="https://developer.apple.com/documentation/mediaplayer/mpvolumeview">MPVolumeView</a> in earlier iOS version.
/// \code
/// let routePickerView = SendBirdCall.routePickerView(frame: frame)
/// self.parentView.addSubView(routePickerView)
///
/// \endcode<ul>
///   <li>
///     Customization
///   </li>
/// </ul>
/// \code
/// if #available(iOS 11.0, *) {
///    guard let routePickerView = routePickerView as? AVRoutePickerView else { return }
///    // Set up AVRoutePickerView
/// } else {
///    guard let routePickerView = routePickerView as? MPVolumeView else { return }
///    // Set up MPVolumeView
/// }
///
///
///
/// \endcodesince:
/// 1.0.0
/// <ul>
///   <li>
///     See Also:
///     <ul>
///       <li>
///         <a href="https://developer.apple.com/documentation/mediaplayer/mpvolumeview">MPVolumeView</a>
///       </li>
///       <li>
///         <a href="https://developer.apple.com/documentation/avkit/avroutepickerview">AVRoutePickerView</a>
///       </li>
///     </ul>
///   </li>
/// </ul>
/// \param frame <code>CGRect</code> value that is assigned to view’s frame.
///
///
/// returns:
///
/// <a href="https://developer.apple.com/documentation/avkit/avroutepickerview">AVRoutePickerView</a> in iOS 11.0 or later. (<a href="https://developer.apple.com/documentation/mediaplayer/mpvolumeview">MPVolumeView</a>  in previous iOS version)
+ (UIView * _Nonnull)routePickerViewWithFrame:(CGRect)frame SWIFT_WARN_UNUSED_RESULT;
/// Specifies the queue that you want to use for callbacks and delegate methods
/// since:
/// 1.0.0
/// \param queue DispatchQueue that will be used when callbacks and delegates are called.
///
+ (void)executeOnQueue:(dispatch_queue_t _Nonnull)queue;
/// Sets the app group.
/// since:
/// 1.10.10
/// \param appGroup The app group.
///
+ (void)setAppGroup:(NSString * _Nonnull)appGroup;
/// Registers a device-specific <code>SendBirdCallDelegate </code>event handler. Responding to device-wide events (e.g. incoming calls) is then managed as shown below:
/// \code
/// SendBirdCall.addDelegate(self, identifier: UNIQUE_HANDLER_ID)
///
/// func didStartRinging(_ call: DirectCall) {
///     call.delegate = self
/// }
///
/// \endcodesince:
/// 1.0.0
/// \param delegate SendBirdCallDelegate that listens to SendBirdCall events
///
/// \param identifier Identifier for the specific delegate
///
+ (void)addDelegate:(id <SBCSendBirdCallDelegate> _Nonnull)delegate identifier:(NSString * _Nonnull)identifier;
/// Removes delegate for the given identifier.
/// since:
/// 1.0.0
/// \param identifier String identifier for the delegate. If SendBirdCall doesn’t have the given identifier, it will be ignored.
///
+ (void)removeDelegateWithIdentifier:(NSString * _Nonnull)identifier;
/// Removes all delegate for SendBirdCall events.
/// since:
/// 1.0.0
+ (void)removeAllDelegates;
/// Adds a <code>SendBirdRecordingDelegate</code> to the SDK which is invoked when a recording session is finished successfully.
/// \code
/// SendBirdCall.addRecordingDelegate(self, identifier: UNIQUE_HANDLER_ID)
///
/// func didSaveRecording(call: DirectCall, recordingId: String, options: RecordingOptions, outputURL: URL) {
///    // Handle successful recording
/// }
///
/// func didFailToSaveRecording(call: DirectCall, recordingId: String, error: SBCError) {
///    // Handle failed recording
/// }
///
/// \endcodesince:
/// 1.3.0
/// \param delegate A <code>RecordingDelegate</code> to add to the SDK.
///
/// \param identifier A unique identifier for the <code>RecordingDelegate</code>.
///
+ (void)addRecordingDelegate:(id <SBCSendBirdRecordingDelegate> _Nonnull)delegate identifier:(NSString * _Nonnull)identifier;
/// Removes a <code>SendBirdRecordingDelegate</code> that has the specified identifier from the SDK.
/// since:
/// 1.3.0
/// \param identifier A unique identifier of a <code>RecordingDelegate</code> to remove from the SDK.
///
+ (void)removeRecordingDelegateWithIdentifier:(NSString * _Nonnull)identifier;
/// Removes all <code>SendBirdRecordingDelegates</code> from the SDK.
/// since:
/// 1.3.0
+ (void)removeAllRecordingDelegates;
/// Returns call for call ID.
/// since:
/// 1.0.0
/// \param callId Call ID.
///
///
/// returns:
///
/// <code>DirectCall</code> object with corresponding call ID. It can be <code>nil</code>.
+ (SBCDirectCall * _Nullable)callForCallId:(NSString * _Nonnull)callId SWIFT_WARN_UNUSED_RESULT;
/// Returns call for a given UUID.
/// since:
/// 1.0.0
/// \param callUUID Call UUID.
///
///
/// returns:
///
/// <code>DirectCall</code> object with corresponding call ID. It can be <code>nil</code>.
+ (SBCDirectCall * _Nullable)callForUUID:(NSUUID * _Nonnull)callUUID SWIFT_WARN_UNUSED_RESULT;
/// Returns number of ongoing calls.
/// since:
/// 1.2.0
+ (NSInteger)getOngoingCallCount SWIFT_WARN_UNUSED_RESULT;
/// Returns all ongoing calls, including the active call and all calls on hold.
/// since:
/// 1.8.0
+ (NSArray<SBCDirectCall *> * _Nonnull)getOngoingCalls SWIFT_WARN_UNUSED_RESULT;
/// Returns all incoming calls by the current user.
/// since:
/// 1.10.9
+ (NSArray<SBCDirectCall *> * _Nonnull)getIncomingCalls SWIFT_WARN_UNUSED_RESULT;
/// Returns the currently authenticated user.
/// since:
/// 1.0.0
///
/// returns:
///
/// User that is currently authenticated. Returns nil if no user exists.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBCUser * _Nullable currentUser;)
+ (SBCUser * _Nullable)currentUser SWIFT_WARN_UNUSED_RESULT;
/// Authenticates user with user ID and access token that you generated at SendBird Dashboard.  In order to make and receive calls, authenticate the user with SendBird server with the the <code>SendBirdCall.authenticate() </code>method.
/// \code
/// let params = AuthenticateParams(userId: userId, accessToken: accessToken)
///
/// SendBirdCall.authenticate(with: params) { user, error in
///     guard let user = user, error == nil else {
///         return
///     }
/// }
///
/// \endcodesince:
/// 1.0.0
/// \param params <code>AuthenticateParams</code> that contains User Id, Access Token, Push Token, and Unique
///
/// \param completionHandler The handler to call when the authenication is complete.
///
+ (void)authenticateWithParams:(SBCAuthenticateParams * _Nonnull)params completionHandler:(void (^ _Nonnull)(SBCUser * _Nullable, SBCError * _Nullable))completionHandler;
/// Deauthenticates user. To stop receiving calls after deauthentication, you should unregister according push tokens by calling <code>unregisterVoIPPush</code> and <code>unregisterRemotePush</code> before deauthenticating.
/// \code
/// SendBirdCall.unregisterVoIPPush(token: myVoIPPushToken) { error in // Unregister push tokens to stop receiving push notifications on deauhtenticated devices. Unregistering push tokens must be done before deauthenticating.
///    // Handle unregister push token
///
///    SendBirdCall.deauthenticate { error in
///        guard error == nil else {
///            // handle error
///            return
///        }
///    )
/// }
///
/// \endcodesince:
/// 1.1.0
/// \param completionHandler Error Handler to be called after deauthenticate process is finished
///
+ (void)deauthenticateWithCompletionHandler:(void (^ _Nullable)(SBCError * _Nullable))completionHandler;
/// Makes a call to user(callee) directly. (1:1 Call).  Use the <code>CallOptions</code> object to choose initial call configuration (e.g. muted/unmuted)
/// \code
/// let params = DialParams(calleeId: CALLEE_ID, callOptions: CallOptions())
///
/// let directCall = SendBirdCall.dial(with: params) { directCall, error in
///     //
/// }
///
/// directCall.delegate = self
///
/// \endcodesince:
/// 1.0.0
/// \param params <code>DialParams</code> that contains calleeId, videoCall flag, CallOptions, and customItems.
///
/// \param completionHandler Callback completionHandler to be called after dialing.
///
///
/// returns:
/// (Discardable) <code>DirectCall</code> object. If the method failed to make a call, it would return <code>nil</code>.
+ (SBCDirectCall * _Nullable)dialWithParams:(SBCDialParams * _Nonnull)params completionHandler:(void (^ _Nonnull)(SBCDirectCall * _Nullable, SBCError * _Nullable))completionHandler;
/// Sets timeout value for the timeout period before unanswered ringing or dialing calls expires and ends. Its default value is 60 seconds.
/// important:
/// If you assign invalid value(0 or negative value), it will be ignored
/// \code
/// SendBirdCall.setRingingTimeout(30)
///
/// \endcodesince:
/// 1.0.5
/// \param timeout Timeout value in seconds.
///
+ (void)setRingingTimeout:(NSInteger)timeout;
/// Sets timeout value for the timeout period before the call is connected. Default value is 60 seconds.
/// important:
/// If you assign invalid value(0 or negative value), it will be ignored.
/// \code
/// SendBirdCall.setCallConnectingTimeout(30)
///
/// \endcodesince:
/// 1.2.0
/// \param timeout Timeout value in seconds.
///
+ (void)setCallConnectingTimeout:(NSInteger)timeout;
/// Handles incoming VoIP push with SendBirdCalls payload. Incoming calls are received either via the application’s persistent internal server connection, or (if the application is in the background) via PushKit. PushKit messages received by the SendBirdCall instance <em>MUST</em> be delivered to the SDK.
/// \code
/// class MyClass: PKPushRegistryDelegate {
///     func pushRegistry(_ registry: PKPushRegistry, didReceiveIncomingPushWith payload: PKPushPayload, for type: PKPushType, completion: @escaping () -> Void) {
///         SendBirdCall.pushRegistry(registry, didReceiveIncomingPushWith: payload, for: type) { uuid in
///       
///             // IMPORTANT: You MUST report incoming call to CallKit when you receive a pushkit push.
///             let provider = CXProvider(configuration: CXProviderConfiguration)
///             let update = CXCallUpdate()
///             update.remoteHandle = CXHandle(type: .generic, value: HANDLE_VALUE)
///             provider.reportNewIncomingCall(with: uuid, update: update) { error in
///                 completion()
///             })
///         }
///     }
/// }
///
/// \endcodesince:
/// 1.0.0
/// \param registry <code>PKPushRegistry</code> object same as  <code>PKPushRegistryDelegate</code> registry.
///
/// \param payload <code>PKPushPayload</code> in incoming VoIP push notification.
///
/// \param type <code>PKPushType</code> of push(<code>VoIP</code>)
///
/// \param completionHandler This closure is invoked with <code>UUID</code> from the payload.
///
+ (void)pushRegistry:(PKPushRegistry * _Nonnull)registry didReceiveIncomingPushWith:(PKPushPayload * _Nonnull)payload for:(PKPushType _Nonnull)type completionHandler:(void (^ _Nullable)(NSUUID * _Nullable))completionHandler;
/// To receive native-like calls while an app is in the background or closed, a device registration token must be registered to the server. Register a device push token during authentication by either providing it as a parameter in the <code>SendBirdCall.authenticate()</code> method, or after authentication has completed using the <code>SendBirdCall.registerVoIPPushToken()</code> method.
/// \code
/// // PKPushRegistryDelegate
/// class AppDelegate: PKPushRegistryDelegate {
///    func voipRegistration() {
///        self.voipRegistry = PKPushRegistry(queue: DispatchQueue.main)
///        self.voipRegistry?.delegate = self
///        self.voipRegistry?.desiredPushTypes = [.voIP]
///    }
///
///    ...
///    func pushRegistry(_ registry: PKPushRegistry, didUpdate pushCredentials: PKPushCredentials, for type: PKPushType) {
///        SendBirdCall.registerVoIPPush(token: pushCredentials.token) { (error) in
///            guard let error = error else {
///                return
///            }
///            // The Push Token has been registered successfully
///        }
///    }
///    ...
/// }
///
/// \endcodesince:
/// 1.0.0
/// \param token <code>Data</code> object from <code>pushCredential.token</code>.  Refer to <code>PKPushRegistryDelegate</code>
///
/// \param unique If it is false, you can register more token for multi devices. It has <code>false</code> as a default value.
///
+ (void)registerVoIPPushWithToken:(NSData * _Nullable)token unique:(BOOL)unique completionHandler:(void (^ _Nullable)(SBCError * _Nullable))completionHandler;
/// Unregisters a VoIP push token of specific device. You will not receive VoIP push notification for a call anymore.   If you don’t want to receive a call in all of the devices of the users, call <code>unregisterAllVoIPPushTokens(completionHandler:)</code>.
/// \code
/// func removeVoIPPushToken() {
///     SendBirdCall.unregisterVoIPPush(token: myVoIPPushToken) { error in
///     guard error == nil else { return }
///     // Unregistered successfully
/// }
///
/// \endcodesince:
/// 1.0.0
/// \param token Optional Data for the push token that you want to unregister
///
/// \param completionHandler ErrorHandler that returns callback with error.
///
+ (void)unregisterVoIPPushWithToken:(NSData * _Nullable)token completionHandler:(void (^ _Nullable)(SBCError * _Nullable))completionHandler;
/// Unregister all VoIP push token registered to the current user(multi device).  You will not receive a call in all of the devices of the users.
/// \code
/// func removeAllOfVoIPPushTokens() {
///     func unregisterAllVoIPPushTokens(completionHandler: ErrorHandler?) {
///         guard error == nil else { return }
///         // Unregistered all push tokens successfully
///     }
/// }
///
/// \endcodesince:
/// 1.0.0
/// \param completionHandler ErrorHandler that returns callback with error
///
+ (void)unregisterAllVoIPPushTokensWithCompletionHandler:(void (^ _Nullable)(SBCError * _Nullable))completionHandler;
/// To receive remote notifications when the app is in the background or closed, you <em>must</em> deliver the received remote notification to SendBirdCalls SDK.
/// note:
/// SendBirdCall will only process SendBird’s notifications. If the userInfo does not contain SendBirdCall’s payload, method will be returned without processing the payload so that you can control the push notifications at your will.
/// \code
/// class AppDelegate {
///     func application(_ application: UIApplication, didReceiveRemoteNotification userInfo: [AnyHashable : Any], fetchCompletionHandler completionHandler: @escaping (UIBackgroundFetchResult) -> Void) {
///         SendBirdCall.application(application, didReceiveRemoteNotification: userInfo)
///     }
/// }
///
/// \endcodesince:
/// 1.0.3
/// \param application Your singleton app object.
///
/// \param userInfo A dictionary that contains information about incoming SendBird Calls.
///
+ (void)application:(UIApplication * _Nonnull)application didReceiveRemoteNotification:(NSDictionary * _Nonnull)userInfo;
/// Mark push notification as delivered for push delivery tracking purpose only.
/// It is only work for <code>Notification Service Extension</code>.
/// This does not mark the message as delivered.
/// since:
/// 1.10.12
/// \param remoteNotificationPayload The remote notification payload
///
/// \param completionHandler The handler block to execute
///
+ (void)markPushNotificationAsDeliveredWithRemoteNotificationPayload:(NSDictionary * _Nonnull)remoteNotificationPayload completionHandler:(void (^ _Nullable)(SBCError * _Nullable))completionHandler;
/// To receive remote notifications while an app is in the background or closed, a device registration token must be registered to the server. Register a remote push token during by using the <code>SendBirdCall.registerRemotePushToken()</code> method.
/// \code
/// func application(_ application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data) {
///   SendBirdCall.registerRemotePush(token: deviceToken) { error in
///       //
///   }
/// }
///
/// \endcodenote:
/// You must register the device to receive remote notifications via Apple Push Notification service for <code>application(_:didRegisterForRemoteNotificationsWithDeviceToken:)</code> to be called. Refer to <code>UIApplication.registerForRemoteNotifications()</code>.
/// since:
/// 1.0.3
/// \param token Unique Token that identifies the device to APNs. Provide the token to register to SendBird.
///
/// \param unique If it is false, you can register more token for multi devices. It has <code>false</code> as a default value.
///
+ (void)registerRemotePushWithToken:(NSData * _Nullable)token unique:(BOOL)unique completionHandler:(void (^ _Nullable)(SBCError * _Nullable))completionHandler;
/// Unregisters a remote push token of specific device. You will not receive remote push notification on the device anymore. If you don’t want to receive remote notifications in all of the devices of the users, call <code>unregisterAllRemotePushTokens(completionHandler:)</code>.
/// <ul>
///   <li>
///     parameters:
///   </li>
///   <li>
///     token: Optional Data for the push token that you want to unregister
///   </li>
///   <li>
///     completionHandler: ErrorHandler that returns callback with error.
///   </li>
/// </ul>
/// \code
/// func removeRemotePushToken() {
///    SendBirdCall.unregisterRemotePush(token: myRemotePushToken) { error in
///        guard error == nil else { return }
///        // Unregistered successfully
///    }
/// }
///
/// \endcodesince:
/// 1.0.3
+ (void)unregisterRemotePushWithToken:(NSData * _Nullable)token completionHandler:(void (^ _Nullable)(SBCError * _Nullable))completionHandler;
/// Unregister all remote push token registered to the current user(multi device).  You will not receive remote notifications in all of the devices of the users.
/// \code
/// func removeAllOfRemotePushTokens() {
///     func unregisterAllRemotePushTokens(completionHandler: ErrorHandler?) {
///         guard error == nil else { return }
///         // Unregistered all remote push tokens successfully
///     }
/// }
///
/// \endcodesince:
/// 1.0.3
/// \param completionHandler ErrorHandler that returns callback with error
///
+ (void)unregisterAllRemotePushTokensWithCompletionHandler:(void (^ _Nullable)(SBCError * _Nullable))completionHandler;
/// Creates a Direct Call Log List Query from given params.
/// since:
/// 1.0.0
/// \param params DirectCallLogListQuery Params with options for creating query.
///
///
/// returns:
///
/// DirectCallLogListQuery: Returns optional query object. Returns nil if current user does not exit.
+ (SBCDirectCallLogListQuery * _Nullable)createDirectCallLogListQueryWithParams:(SBCDirectCallLogListQueryParams * _Nonnull)params SWIFT_WARN_UNUSED_RESULT;
/// Creates a query for room list with specified parameters.
/// since:
/// 1.7.0
/// \param params RoomListQuery Params with options for creating query.
///
+ (SBCRoomListQuery * _Nullable)createRoomListQueryWith:(SBCRoomListQueryParams * _Nonnull)params SWIFT_WARN_UNUSED_RESULT;
/// Updates custom items for a given call Id.
/// since:
/// 1.0.0
/// \param callId Call ID.
///
/// \param customItems Custom items of [String: String] to be updated or inserted.
///
/// \param completionHandler Callback completionHandler. Contains custom items, changes custom items, and error.
///
+ (void)updateCustomItemsWithCallId:(NSString * _Nonnull)callId customItems:(NSDictionary<NSString *, NSString *> * _Nonnull)customItems completionHandler:(void (^ _Nonnull)(NSDictionary<NSString *, NSString *> * _Nullable, NSArray<NSString *> * _Nullable, SBCError * _Nullable))completionHandler;
/// Deletes custom items for a given call Id.
/// since:
/// 1.0.0
/// \param callId Call ID.
///
/// \param customItemKeys Keys of custom items that you want to delete.
///
/// \param completionHandler Callback completionHandler. Contains custom items, changes custom items, and error.
///
+ (void)deleteCustomItemsWithCallId:(NSString * _Nonnull)callId customItemKeys:(NSArray<NSString *> * _Nonnull)customItemKeys completionHandler:(void (^ _Nonnull)(NSDictionary<NSString *, NSString *> * _Nullable, NSArray<NSString *> * _Nullable, SBCError * _Nullable))completionHandler;
/// Deletes all custom items for a given call Id.
/// since:
/// 1.0.0
/// \param callId Call ID.
///
/// \param completionHandler Callback completionHandler. Contains custom items, changes custom items, and error.
///
+ (void)deleteAllCustomItemsWithCallId:(NSString * _Nonnull)callId completionHandler:(void (^ _Nonnull)(NSDictionary<NSString *, NSString *> * _Nullable, NSArray<NSString *> * _Nullable, SBCError * _Nullable))completionHandler;
/// Called when the audio session is activated outside of the app by iOS.
/// \code
/// class AppDelegate: CXProviderDelegate {
///     func provider(_ provider: CXProvider, didActivate audioSession: AVAudioSession) {
///         SendBirdCall.audioSessionDidActivate(audioSession)
///     }
/// }
///
/// // MARK: - Audio Session
///
///
/// \endcodesince:
/// 1.0.2
+ (void)audioSessionDidActivate:(AVAudioSession * _Nonnull)audioSession;
/// Called when the audio session is deactivated outside of the app by iOS.
/// \code
/// class AppDelegate: CXProviderDelegate {
///     func provider(_ provider: CXProvider, didDeactivate audioSession: AVAudioSession) {
///         SendBirdCall.audioSessionDidDeactivate(audioSession)
///     }
/// }
///
/// \endcodesince:
/// 1.0.2
+ (void)audioSessionDidDeactivate:(AVAudioSession * _Nonnull)audioSession;
/// Adds sound used in <code>DirectCall</code>  such as ringtone and some sound effects with its file name and bundle.
/// \code
/// SendBirdCall.addDirectCallSound("dialing.mp3", forType: .dialing)
///
/// \endcodesince:
/// 1.3.0
/// \param name The name of your audio file. Please explicit its extension: “dialing.mp3”
///
/// \param bundle The bundle object. The default is main bundle.
///
/// \param type The type of sound.
///
+ (void)addDirectCallSound:(NSString * _Nonnull)name bundle:(NSBundle * _Nonnull)bundle forType:(enum SBCSoundType)type;
/// Enables / disables dial sound used in <code>DirectCall</code> even when the device is in silent mode. Call this method right after <code>addDirectCallSound(_:forType:)</code>.
/// \code
/// SendBirdCall.addDirectCallSound("dialing.mp3", forType: .dialing)
/// SendBirdCall.setDirectCallDialingSoundOnWhenSilentMode(isEnabled: true) // Will play dial direct call sounds in silent mode
///
/// \endcodesince:
/// 1.5.0
/// \param isEnabled If it is <code>true</code>, dial sound used in <code>DirectCall</code> will be played in silent mode.
///
+ (void)setDirectCallDialingSoundOnWhenSilentMode:(BOOL)isEnabled;
/// Adds sound used in <code>DirectCall</code>  such as ringtone and some sound effects with URL. If you use bundle to play sound, <code>addDirectCallSound(_:bundle:forType:)</code> is recommended.
/// \code
/// SendBirdCall.addDirectCallSound("dialing.mp3", forType: .dialing)
///
/// \endcodesince:
/// 1.3.0
/// \param url The URL of your audio file.
///
/// \param type The key respresenting the type of sound.
///
+ (void)addDirectCallSound:(NSURL * _Nonnull)url forType:(enum SBCSoundType)type;
/// Removes sound used in <code>DirectCall</code> with <code>SoundType</code> value.
/// \code
/// SendBirdCall.removeDirectCallSound(forType: .dialing)
///
/// \endcodesince:
/// 1.3.0
/// \param type The type of sound you want to remove.
///
+ (void)removeDirectCallSoundForType:(enum SBCSoundType)type;
/// Actively retrieve incoming direct calls that were not received via push notifications.
/// If incoming calls exist when this method is called, <code>SendBirdCallDelegate.didStartRinging</code> will be called.
/// since:
/// 1.10.7
+ (void)retrieveMissedDirectCallsWithCompletionHandler:(void (^ _Nullable)(SBCError * _Nullable))completionHandler;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE;
@end


@interface SBCSendBirdCall (SWIFT_EXTENSION(SendBirdCalls))
/// Creates a room for group calls.
/// \code
/// SendBirdCall.createRoom { room, error in
///    ...
///    // Set up delegate to receive events
/// }
///
/// \endcodesince:
/// 1.6.0
/// \param completionHandler A callback function that receives information about a room or an error from Sendbird server.
///
+ (void)createRoomWithParams:(SBCRoomParams * _Nonnull)params completionHandler:(void (^ _Nonnull)(SBCRoom * _Nullable, SBCError * _Nullable))completionHandler;
/// Gets a locally-cached room instance by room ID.
/// since:
/// 1.6.0
/// \param roomId room ID.
///
///
/// returns:
/// <code>Room</code> object with the corresponding roomId
+ (SBCRoom * _Nullable)cachedRoomByRoomId:(NSString * _Nonnull)roomId SWIFT_WARN_UNUSED_RESULT;
/// Fetches a room instance from Sendbird server.
/// since:
/// 1.6.0
/// \param roomId room ID.
///
/// \param completionHandler Callback to be called after get <code>Room</code> object corresponding the ID or an error
///
+ (void)fetchRoomByRoomId:(NSString * _Nonnull)roomId completionHandler:(void (^ _Nonnull)(SBCRoom * _Nullable, SBCError * _Nullable))completionHandler;
@end


/// Device-wide delegate for SendBirdCall.
/// since:
/// 1.0.0
SWIFT_PROTOCOL_NAMED("SendBirdCallDelegate")
@protocol SBCSendBirdCallDelegate
@optional
/// Called when incoming calls are received.
/// \code
/// class MyClass: SendBirdCallDelegate {
///     func didStartRinging(_ call: DirectCall) {
///         call.delegate = self
///     }
/// }
///
/// \endcodesince:
/// 1.0.0
/// \param call <code>DirectCall</code> object.
///
- (void)didStartRinging:(SBCDirectCall * _Nonnull)call;
/// Called when a VoIP Push notification is received about incoming DirectCall, but that call has already been processed.
/// Inside this delegate method, you should show an incoming CallKit call but dismiss it since it’s invalid.
/// since:
/// 1.10.7
- (void)didReceiveVoIPException:(SBCDirectCall * _Nonnull)ongoingCall;
/// Called when the specified user receives the invitation to enter the room.
/// \code
/// class MyClass: SendBirdCallDelegate {
///     func didReceiveInvitation(_ invitation: RoomInvitation) {
///        // Accept invitation
///        invitation.accept { error in }
///
///        // Decline invitation
///        invitation.decline { error in }
///     }
/// }
///
/// \endcodesince:
/// 1.10.0
/// \param invitation <code>RoomInvitation</code> object.
///
- (void)didReceiveInvitation:(RoomInvitation * _Nonnull)invitation;
@end


SWIFT_CLASS_NAMED("SendBirdChatOptions")
@interface SBCChatOptions : NSObject
@property (nonatomic, copy) NSString * _Nonnull channelURL;
- (nonnull instancetype)initWithChannelURL:(NSString * _Nonnull)channelURL OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// A Int64 Range with half-open interval from a lower bound up to, but not including, an upper bound. Default value is <code>Int64.min..<Int64.max</code>.
/// since:
/// 1.7.0
SWIFT_CLASS_NAMED("SendBirdRange")
@interface SBCRange : NSObject
/// Determines the value for lower bound.
/// since:
/// 1.7.0
@property (nonatomic) int64_t lowerBound;
/// Determines the value for upper bound.
/// since:
/// 1.7.0
@property (nonatomic) int64_t upperBound;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init:(NSRange)range OBJC_DESIGNATED_INITIALIZER;
@end


/// Device-wide recordingDelegate for SendBirdCall.
/// since:
/// 1.3.0
SWIFT_PROTOCOL_NAMED("SendBirdRecordingDelegate")
@protocol SBCSendBirdRecordingDelegate
/// Notifies that a recording session has been saved successfully. This receives information about the recording through the following parameters.
/// \code
/// class MyClass: SendBirdRecordingDelegate {
///    func didSaveRecording(call: DirectCall, recordingId: String, options: RecordingOptions, outputURL: URL) {
///         // Handle successful recording
///     }
/// }
///
/// \endcodesince:
/// 1.3.0
/// \param call A recorded direct call.
///
/// \param recordingId A unique identifier of the recording session created in <code>startRecording</code>.
///
/// \param options An option that is used when starting a recording session.
///
/// \param outputURL A URL which the recorded file is saved.
///
- (void)didSaveRecordingWithCall:(SBCDirectCall * _Nonnull)call recordingId:(NSString * _Nonnull)recordingId options:(SBCRecordingOptions * _Nonnull)options outputURL:(NSURL * _Nonnull)outputURL;
/// Notifies that a recording session has not been saved. This receives information about the recording through the following parameters.
/// \code
/// class MyClass: SendBirdRecordingDelegate {
///    func didFailToSaveRecording(call: DirectCall, recordingId: String, error: SBCError) {
///        // Handle failed recording.
///    }
/// }
///
/// \endcode\param call A recorded direct call.
///
/// \param recordingId A unique identifier of the recording session created in <code>startRecording</code>.
///
/// \param error An error that occurred while saving a recording.
///
- (void)didFailToSaveRecordingWithCall:(SBCDirectCall * _Nonnull)call recordingId:(NSString * _Nonnull)recordingId error:(SBCError * _Nonnull)error;
@end

@protocol RTCVideoViewShading;

/// Video renderring view. Add to your <code>UIView</code> to show video.
/// \code
/// @IBOutlet weak var localVideoView: UIView?
/// @IBOutlet weak var remoteVideoView: UIView?
///
/// ...
///
/// let localSBView = SendBirdVideoView(frame: self.localVideoView?.frame ?? CGRect.zero)
/// let remoteSBView = SendBirdVideoView(frame: self.remoteVideoView?.frame ?? CGRect.zero)
///
/// self.call.updateLocalVideoView(localSBView)
/// self.call.updateRemoteVideoView(remoteSBView)
///
/// // When you make a call or accept an incoming call.
/// let callOptions = CallOptions(
///                   isAudioEnabled = true,
///                   isVideoEnabled = true,
///                   localVideoView: localSBVideoView
///                   remoteVideoView: remoteSBVideoView)
///
/// // Or when update local / remote view
/// self.call.updateLocalVideoView(localSBView)
/// self.call.updateRemoteVideoView(remoteSBView)
///
///
/// \endcodesince:
/// 1.0.0
SWIFT_CLASS_NAMED("SendBirdVideoView")
@interface SBCVideoView : RTCEAGLVideoView
/// Initializes SendBirdVideoView with a custom contentMode.
/// note:
/// Custom UIView.ContentMode on non-arm64 devices is not supported.
/// since:
/// 1.6.0
- (nonnull instancetype)initWithFrame:(CGRect)frame contentMode:(enum UIViewContentMode)contentMode OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// UIView.ContentMode of video. Default value is scaleAspectFill
/// note:
/// Custom UIView.ContentMode on non-arm64 devices is not supported.
/// since:
/// 1.6.0
@property (nonatomic) enum UIViewContentMode videoContentMode;
/// Embeds the SendBirdVideoView into the provided UIView.
/// Layout Constraints are added to make the SendBirdVideoView fill the size of the provided UIVIew.
/// since:
/// 1.6.1
/// \param view UIView in which the SendBirdVideoView will be inserted to. Superview of this SendBirdVideoView.
///
- (void)embedInView:(UIView * _Nonnull)view;
- (nonnull instancetype)initWithFrame:(CGRect)frame shader:(id <RTCVideoViewShading> _Nonnull)shader SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder shader:(id <RTCVideoViewShading> _Nonnull)shader SWIFT_UNAVAILABLE;
@end

@class RTCVideoFrame;

@interface SBCVideoView (SWIFT_EXTENSION(SendBirdCalls))
- (void)renderFrame:(RTCVideoFrame * _Nullable)frame;
@end

/// The sound types.
/// since:
/// 1.3.0
typedef SWIFT_ENUM_NAMED(NSInteger, SBCSoundType, "SoundType", open) {
/// Refers to a sound that is played on a caller’s side when the caller makes a call to a callee.
/// since:
/// 1.3.0
  SBCSoundTypeDialing = 0,
/// Refers to a sound that is played on a callee’s side when receiving a call.
/// since:
/// 1.3.0
  SBCSoundTypeRinging = 1,
/// Refers to a sound that is played when a connection is lost, but immediately tries to reconnect. Users are also allowed to customize the ringtone.
/// since:
/// 1.3.0
  SBCSoundTypeReconnecting = 2,
/// Refers to a sound that is played when a connection is re-established.
/// since:
/// 1.3.0
  SBCSoundTypeReconnected = 3,
};



@interface SBCUser (SWIFT_EXTENSION(SendBirdCalls)) <NSCopying>
/// Returns a copied instance of the <code>User</code>.
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
@end


@interface SBCUser (SWIFT_EXTENSION(SendBirdCalls))
/// The hash value of <code>User</code>.
@property (nonatomic, readonly) NSUInteger hash;
/// Returns a Boolean value that indicates whether the <code>User</code> and a given object are equal.
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end

enum SBCVideoDevicePosition : NSInteger;

/// A device for capture video.
/// \code
/// func flipCamera(call: DirectCall) {
///
///    let current = call.currentVideoDevice
///    let devices = call.availableVideoDevices
///
///    guard let device = devices.first(where: { $0.position != current?.position }) else { return }
///    
///    call.selectVideoDevice(device) { error in
///        // do something when error has occurred.
///    }
/// }
///
/// \endcodesince:
/// 1.0.0
SWIFT_CLASS_NAMED("VideoDevice")
@interface SBCVideoDevice : NSObject
/// An ID unique to the model of device corresponding to the receiver.
/// since:
/// 1.0.0
@property (nonatomic, readonly, copy) NSString * _Nonnull uniqueId;
/// A localized human-readable name for the receiver.
/// since:
/// 1.0.0
@property (nonatomic, readonly, copy) NSString * _Nonnull localizedName;
/// Indicates the physical position of an VideoDevice’s hardware.
/// since:
/// 1.0.0
@property (nonatomic, readonly) enum SBCVideoDevicePosition position;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



@interface SBCVideoDevice (SWIFT_EXTENSION(SendBirdCalls))
@end

/// Constants indicating the physical position of an VideoDevice’s hardware.
/// since:
/// 1.0.0
typedef SWIFT_ENUM_NAMED(NSInteger, SBCVideoDevicePosition, "Position", open) {
/// The video device is on the front of the unit.
/// since:
/// 1.0.0
  SBCVideoDevicePositionFront = 0,
/// The video device is on the back of the unit.
/// since:
/// 1.0.0
  SBCVideoDevicePositionBack = 1,
/// The video device’s position relative to the system hardware is unspecified.
/// since:
/// 1.0.0
  SBCVideoDevicePositionUnspecified = 2,
};


#endif
#if defined(__cplusplus)
#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
